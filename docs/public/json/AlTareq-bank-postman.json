{
	"info": {
		"_postman_id": "07dc0d08-6e9f-4e1d-899e-2726df7d175f",
		"name": "API Hub Sandbox v1.2 2025.04.28",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25588140",
		"_collection_link": "https://planetary-station-429607.postman.co/workspace/CBUAE---Postman-collection-reco~4c61e529-5fa8-49da-b521-c16c7eb91385/collection/25588140-07dc0d08-6e9f-4e1d-899e-2726df7d175f?action=share&source=collection_link&creator=25588140"
	},
	"item": [
		{
			"name": "TPP Onboarding",
			"item": [
				{
					"name": "POST registration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-cert-dn",
								"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "{{$randomUUID}}",
								"type": "text"
							},
							{
								"key": "x-cert-dn",
								"value": "CN=37ab0f6e-ecee-4f3b-a99d-2d876df1dcbc,OU=73423662-b345-453e-a54b-2f9115a6a45d,O=RAIDIAM SERVICES LIMITED,C=UK",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{rs}}/tpp-registration",
							"host": [
								"{{rs}}"
							],
							"path": [
								"tpp-registration"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Postman Environment & Collection",
			"item": [
				{
					"name": "GET /environment",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token-from-auth-code-grant-accounts}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{rs}}/o3/v1.0/postman/environment?client_id=1a703edb-b138-4fae-99aa-8348d418f296",
							"host": [
								"{{rs}}"
							],
							"path": [
								"o3",
								"v1.0",
								"postman",
								"environment"
							],
							"query": [
								{
									"key": "client_id",
									"value": "1a703edb-b138-4fae-99aa-8348d418f296"
								},
								{
									"key": "client_id",
									"value": "https://rp.sandbox.directory.openfinance.ae/openid_relying_party/37ab0f6e-ecee-4f3b-a99d-2d876df1dcbc",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /collection/CBUAE",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token-from-auth-code-grant-accounts}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{rs}}/o3/v1.0/postman/collection/CBUAE",
							"host": [
								"{{rs}}"
							],
							"path": [
								"o3",
								"v1.0",
								"postman",
								"collection",
								"CBUAE"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Sharing",
			"item": [
				{
					"name": "AuthFlow",
					"item": [
						{
							"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
											"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
											"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
											"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid accounts",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{issuer}}/.well-known/openid-configuration",
									"host": [
										"{{issuer}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare request object JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 60);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
											"",
											"",
											"const uuid = require('uuid');",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
											"console.log(codeChallenge);",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge );",
											"pm.environment.set(\"code-verifier\", codeVerifier );"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"requestObject\", responseBody);",
											"var a = responseBody.split('.');",
											"var words = CryptoJS.enc.Base64.parse(a[1]);",
											"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
											"console.log(bodyData);",
											"var jsonData = JSON.parse(bodyData);",
											"console.log(jsonData);",
											"",
											"pm.environment.set(\"response_type\", jsonData.response_type);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											"",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"accounts openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:account-access-consent:v1.2\",\n                \"consent\": {\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"OnBehalfOf\": {\n                        \"TradingName\": \"Ozone\",\n                        \"LegalName\": \"Ozone-CBUAE\",\n                        \"IdentifierType\": \"Other\",\n                        \"Identifier\": \"Identifier\"\n                    },\n                    \"ConsentId\": \"{{$guid}}\",\n                    // \"BaseConsentId\": \"b9f42378-10ac-46a1-8d20-4e020484216d\",\n                    \"Permissions\": [\n                        \"ReadTransactionsCredits\",\n                        \"ReadAccountsBasic\",\n                        \"ReadBalances\",\n                        \"ReadTransactionsBasic\",\n                        \"ReadTransactionsDetail\",\n                        \"ReadDirectDebits\",\n                        \"ReadBeneficiariesDetail\",\n                        \"ReadBeneficiariesBasic\",\n                        \"ReadScheduledPaymentsBasic\",\n                        \"ReadScheduledPaymentsDetail\",\n                        \"ReadStandingOrdersBasic\",\n                        \"ReadStandingOrdersDetail\",\n                        \"ReadParty\",\n                        \"ReadPartyUserIdentity\",\n                        \"ReadProduct\"\n                    ],\n                    //  \"TransactionFromDateTime\": \"2025-03-01T23:00:00.000Z\",\n                    //  \"TransactionToDateTime\": \"2025-03-31T23:00:00.000Z\",\n                    \"OpenFinanceBilling\": {\n                        \"UserType\": \"Retail\",\n                        \"Purpose\": \"AccountAggregation\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": true\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare private key JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"const uuid = require('uuid');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "4000: TPP-API Hub: POST to PAR end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(pm.response.text());",
											"",
											"pm.environment.set(\"par-urn\", jsonData.request_uri);",
											"",
											"const clientId = pm.environment.get(\"_clientId\");",
											"const authEndpoint = pm.environment.get('auth-endpoint');",
											"const response_type = pm.environment.get('response_type');",
											"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
											"",
											"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
											"",
											"if (pm.response.code === 201) {",
											"    var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
											"    var template = utils.visualizer.qrTemplate1();",
											"    var data = utils.visualizer.qrData(myUrl);",
											"",
											"    utils.visualizer.draw(pm.visualizer, template, {",
											"        response: data",
											"    })",
											"}",
											"",
											"// encode the url ",
											"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
											"pm.environment.set(\"authCodeUrl\", responseBody);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{_clientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{requestObject}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{par-endpoint}}",
									"host": [
										"{{par-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5004: LFI-API Hub: /auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
											"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authCodeUrl}}",
									"host": [
										"{{authCodeUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5015: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-cert-dn",
										"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6005: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
										"disabled": true
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"authorizationCode\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "heimdall.suppressRefreshToken",
											"value": "false",
											"type": "text"
										},
										{
											"key": "heimdall.accessTokenValidity",
											"value": "3600",
											"type": "text",
											"disabled": true
										},
										{
											"key": "heimdall.refreshTokenValidity",
											"value": "7200",
											"type": "text",
											"disabled": true
										},
										{
											"key": "openbanking_intent_id",
											"value": "{{consent-id-from-hh}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"{{interaction-id}}",
										"doConfirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "7002: TPP-API Hub: Auth Code Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token-from-auth-code-grant-accounts\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorizationCode}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirectUrl}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code-verifier}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								},
								"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "AuthFlow - with login_hint",
					"item": [
						{
							"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
											"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
											"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
											"// pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid payments",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{issuer}}/.well-known/openid-configuration",
									"host": [
										"{{issuer}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare Encrypted login_hint",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const CryptoJS = require('crypto-js');",
											"const uuid = require('uuid');",
											"",
											"pm.environment.set('x-fapi-interaction-id', uuid.v4());",
											"",
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
											"",
											"console.log(codeChallenge);",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge);",
											"pm.environment.set(\"code-verifier\", codeVerifier);",
											"",
											"function base64url(source) {",
											"    let encodedSource = CryptoJS.enc.Base64.stringify(source);",
											"    encodedSource = encodedSource.replace(/=+$/, '');",
											"    encodedSource = encodedSource.replace(/\\+/g, '-');",
											"    encodedSource = encodedSource.replace(/\\//g, '_');",
											"    return encodedSource;",
											"}",
											"",
											"const header = {",
											"    \"alg\": \"none\",",
											"    \"type\": \"JWT\"",
											"}",
											"",
											"const PIIPayload = {",
											"    \"Initiation\": {",
											"        \"CreditorAgent\": {",
											"            \"SchemeName\": \"AccountNumber\",",
											"            \"Identification\": \"10000109010101\",",
											"            \"Name\": \"Mario International\"",
											"        },",
											"        \"Creditor\": {",
											"            \"Name\": \"Mario International\"",
											"        },",
											"        \"CreditorAccount\": {",
											"            \"SchemeName\": \"AccountNumber\",",
											"            \"Identification\": \"10000109010101\",",
											"            \"Name\": \"Mario International\"",
											"        }",
											"    },",
											"    \"Risk\": {",
											"        \"DebtorIndicators\": {",
											"            \"UserName\": {",
											"                \"en\": \"xx\"",
											"            }",
											"        },",
											"        \"CreditorIndicators\": {",
											"            \"AccountType\": \"Retail\",",
											"            \"IsCreditorConfirmed\": true,",
											"            \"IsCreditorPrePopulated\": true,",
											"            \"TradingName\": \"xxx\"",
											"        }",
											"    }",
											"}",
											"",
											"const empty = {};",
											"",
											"const encodeHeader = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(header)));",
											"const encodePayload = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(PIIPayload)));",
											"const emptiness = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(empty)));",
											"",
											"const encryptedLoginHint = `${encodeHeader}.${encodePayload}.${emptiness}.${emptiness}.${emptiness}`;",
											"pm.environment.set(\"encryptedLoginHint\", encryptedLoginHint);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set('encryptedLoginHint', pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Type\": \"TradeLicenceNumber\",\n        \"Identification\": \"8484848485858585\"\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-encryption",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-encryption"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare request object JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
											"",
											"const uuid = require('uuid');",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"pm.environment.set('service-initiation-consent-id', uuid.v4())",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
											"console.log(codeChallenge);",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge );",
											"pm.environment.set(\"code-verifier\", codeVerifier );"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"requestObject\", responseBody);",
											"",
											"var a = responseBody.split('.');",
											"var words = CryptoJS.enc.Base64.parse(a[1]);",
											"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
											"console.log(bodyData);",
											"var jsonData = JSON.parse(bodyData);",
											"console.log(jsonData);",
											"",
											"pm.environment.set(\"response_type\", jsonData.response_type);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											"",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"accounts openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"login_hint\": \"{{encryptedLoginHint}}\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:account-access-consent:v1.2\",\n                \"consent\": {\n                    \"ExpirationDateTime\": \"2025-10-29T23:00:00.000Z\",\n                    \"OnBehalfOf\": {\n                        \"TradingName\": \"Ozone\",\n                        \"LegalName\": \"Ozone-CBUAE\",\n                        \"IdentifierType\": \"Other\",\n                        \"Identifier\": \"Identifier\"\n                    },\n                    \"ConsentId\": \"{{$guid}}\",\n                    // \"BaseConsentId\": \"b465ab23-017e-4d86-98d2-bff578e0de08\",\n                    \"Permissions\": [\n                        \"ReadTransactionsCredits\",\n                        \"ReadAccountsBasic\",\n                        \"ReadBalances\",\n                        \"ReadTransactionsBasic\",\n                        \"ReadTransactionsDetail\",\n                        \"ReadDirectDebits\",\n                        \"ReadBeneficiariesDetail\",\n                        \"ReadBeneficiariesBasic\",\n                        \"ReadScheduledPaymentsBasic\",\n                        \"ReadScheduledPaymentsDetail\",\n                        \"ReadStandingOrdersBasic\",\n                        \"ReadStandingOrdersDetail\",\n                        \"ReadParty\",\n                        \"ReadPartyUserIdentity\",\n                        \"ReadProduct\"\n                    ],\n                    \"OpenFinanceBilling\": {\n                        \"UserType\": \"Retail\",\n                        \"Purpose\": \"AccountAggregation\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare private key JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const uuid = require('uuid');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "4000: TPP-API Hub: POST to PAR end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(pm.response.text());",
											"",
											"pm.environment.set(\"par-urn\", jsonData.request_uri);",
											"",
											"const clientId = pm.environment.get(\"_clientId\");",
											"const authEndpoint = pm.environment.get('auth-endpoint');",
											"const response_type = pm.environment.get('response_type');",
											"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
											"",
											"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
											"",
											"if (pm.response.code === 201) {",
											"    var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
											"    var template = utils.visualizer.qrTemplate1();",
											"    var data = utils.visualizer.qrData(myUrl);",
											"",
											"    utils.visualizer.draw(pm.visualizer, template, {",
											"        response: data",
											"    })",
											"}",
											"",
											"// List of strings to check",
											"const stringList = [",
											"    \"adibmobilebanking://adib/openfinance/auth\",",
											"    \"adcb://uat.mib.pn/auth\",",
											"    \"https://dev.emiratesnbd.com/external-login/auth\",",
											"    \"https://openbanking-uat.bankfab.com/ae/consumer/auth\"",
											"];",
											"",
											"let responseBody = authCodeUrl;",
											"// The value of A",
											"let A = authCodeUrl;",
											"",
											"// Replacement string B",
											"const B = pm.environment.get('authEndpoint');",
											"",
											"// Check and replace",
											"for (const str of stringList) {",
											"    if (authCodeUrl.includes(str)) {",
											"        responseBody = A.replace(str, B);",
											"        break; // Stops after the first match and replacement",
											"    }",
											"}",
											"",
											"pm.environment.set(\"authCodeUrl\", responseBody);",
											"console.log(pm.environment.get(\"authCodeUrl\"))",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{_clientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{requestObject}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{par-endpoint}}",
									"host": [
										"{{par-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5004: LFI-API Hub: /auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
											"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authCodeUrl}}",
									"host": [
										"{{authCodeUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5015: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-cert-dn",
										"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6005: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
										"disabled": true
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"authorizationCode\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "heimdall.suppressRefreshToken",
											"value": "false",
											"type": "text"
										},
										{
											"key": "heimdall.accessTokenValidity",
											"value": "3600",
											"type": "text",
											"disabled": true
										},
										{
											"key": "heimdall.refreshTokenValidity",
											"value": "7200",
											"type": "text",
											"disabled": true
										},
										{
											"key": "openbanking_intent_id",
											"value": "{{consent-id-from-hh}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"{{interaction-id}}",
										"doConfirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "7002: TPP-API Hub: Auth Code Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token-from-auth-code-grant-accounts\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorizationCode}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirectUrl}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code-verifier}}",
											"type": "text"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								},
								"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var tenant = 'ALLICA';",
									"",
									"const usersByBank = {",
									"    ALLICA: [{",
									"        psuIdentifiers: {",
									"            userId: \"100001000000000000000002\"",
									"",
									"        },",
									"",
									"        accountIds: [",
									"            \"100004000000000000000002\"",
									"            // \"100004000000000000000003\",",
									"            // \"100004000000000000000004\",",
									"            // \"100004000000000000000005\",",
									"        ]",
									"    }],",
									"",
									"}",
									"const userDetails = usersByBank[tenant][0];",
									"",
									"pm.environment.set('userId', userDetails.psuIdentifiers.userId);",
									"pm.environment.set('accountIds', JSON.stringify(userDetails.accountIds));",
									"pm.environment.set('accountIdsPayment', JSON.stringify(userDetails.accountIds[0]));",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "AuthFlow - with jwt-auth mandatory",
					"item": [
						{
							"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
											"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
											"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
											"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid accounts",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{issuer}}/.well-known/openid-configuration",
									"host": [
										"{{issuer}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare request object JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 60);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const uuid = require('uuid');",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
											"console.log(codeChallenge);",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge );",
											"pm.environment.set(\"code-verifier\", codeVerifier );"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"requestObject\", responseBody);",
											"var a = responseBody.split('.');",
											"var words = CryptoJS.enc.Base64.parse(a[1]);",
											"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
											"console.log(bodyData);",
											"var jsonData = JSON.parse(bodyData);",
											"console.log(jsonData);",
											"",
											"pm.environment.set(\"response_type\", jsonData.response_type);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											"",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"accounts openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:account-access-consent:v1.2\",\n                \"consent\": {\n                    \"ExpirationDateTime\": \"2025-09-18T23:00:00.000Z\",\n                    \"OnBehalfOf\": {\n                        \"TradingName\": \"Ozone\",\n                        \"LegalName\": \"Ozone-CBUAE\",\n                        \"IdentifierType\": \"Other\",\n                        \"Identifier\": \"Identifier\"\n                    },\n                    \"ConsentId\": \"{{$guid}}\",\n                    // \"BaseConsentId\": \"b465ab23-017e-4d86-98d2-bff578e0de08\",\n                    \"Permissions\": [\n                        \"ReadTransactionsCredits\",\n                        \"ReadAccountsBasic\",\n                        \"ReadBalances\",\n                        \"ReadTransactionsBasic\",\n                        \"ReadTransactionsDetail\",\n                        \"ReadDirectDebits\",\n                        \"ReadBeneficiariesDetail\",\n                        \"ReadBeneficiariesBasic\",\n                        \"ReadScheduledPaymentsBasic\",\n                        \"ReadScheduledPaymentsDetail\",\n                        \"ReadStandingOrdersBasic\",\n                        \"ReadStandingOrdersDetail\",\n                        \"ReadParty\",\n                        \"ReadPartyUserIdentity\",\n                        \"ReadProduct\"\n                    ],\n                    //  \"TransactionFromDateTime\": \"2023-10-23T23:00:00.000Z\",\n                    //  \"TransactionToDateTime\": \"2023-12-30T23:00:00.000Z\",\n                    \"OpenFinanceBilling\": {\n                        \"UserType\": \"Retail\",\n                        \"Purpose\": \"AccountAggregation\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare private key JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"const uuid = require('uuid');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "4000: TPP-API Hub: POST to PAR end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(pm.response.text());",
											"",
											"pm.environment.set(\"par-urn\", jsonData.request_uri);",
											"",
											"const clientId = pm.environment.get(\"_clientId\");",
											"const authEndpoint = pm.environment.get('auth-endpoint');",
											"const response_type = pm.environment.get('response_type');",
											"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
											"",
											"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
											"",
											"if (pm.response.code === 201) {",
											"    var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
											"    var template = utils.visualizer.qrTemplate1();",
											"    var data = utils.visualizer.qrData(myUrl);",
											"",
											"    utils.visualizer.draw(pm.visualizer, template, {",
											"        response: data",
											"    })",
											"}",
											"",
											"// encode the url ",
											"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
											"pm.environment.set(\"authCodeUrl\", responseBody);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{_clientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{requestObject}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{par-endpoint}}",
									"host": [
										"{{par-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3000-B: Prepare private key JWT Auth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"exp_auth\", (Date.now() / 1000));",
											"postman.setEnvironmentVariable(\"iat_auth\", (Date.now() / 1000) - 10);",
											"postman.setEnvironmentVariable(\"iat_name\", \"RAIDIAM SERVICES LIMITED\");",
											"postman.setEnvironmentVariable(\"sub_auth\", \"233bcd1d-4216-4b3c-a362-9e4a9282bba7\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"private_key_jwt_auth\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp_auth}},\n        \"iss\": \"{{iat_name}}\",\n        \"sub\": \"{{sub_auth}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{iat_auth}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "5004: LFI-API Hub: /auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
											"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{private_key_jwt_auth}}",
										"type": "text"
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{authCodeUrl}}",
									"host": [
										"{{authCodeUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5015: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{private_key_jwt_auth}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6005: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "content-type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{private_key_jwt_auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"authorizationCode\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{private_key_jwt_auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "heimdall.suppressRefreshToken",
											"value": "false",
											"type": "text"
										},
										{
											"key": "heimdall.accessTokenValidity",
											"value": "3600",
											"type": "text",
											"disabled": true
										},
										{
											"key": "heimdall.refreshTokenValidity",
											"value": "7200",
											"type": "text",
											"disabled": true
										},
										{
											"key": "openbanking_intent_id",
											"value": "{{consent-id-from-hh}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"{{interaction-id}}",
										"doConfirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "7002: TPP-API Hub: Auth Code Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token-from-auth-code-grant-accounts\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorizationCode}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirectUrl}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code-verifier}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								},
								"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Data Sharing APIs (application/json)",
					"item": [
						{
							"name": "TPP",
							"item": [
								{
									"name": "Data sharing",
									"item": [
										{
											"name": "8000: TPP-API Hub: GET multiple accounts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"account-id\", jsonData.Data.Account[0].AccountId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "8001: TPP-API Hub: GET accounts/{accountId}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "8002: TPP-API Hub: GET accounts/{accountId}/balances",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/balances",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"balances"
													],
													"query": [
														{
															"key": "toBookingDateTime",
															"value": "2023-12-29T23:00:00.000Z",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "8003: TPP-API Hub: GET accounts/{accountId}/transactions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/transactions",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"transactions"
													],
													"query": [
														{
															"key": "fromBookingDateTime",
															"value": "2025-03-19T23:00:00.000Z",
															"disabled": true
														},
														{
															"key": "toBookingDateTime",
															"value": "2025-03-25T23:00:00.000Z",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "8004: TPP-API Hub: GET accounts/{accountId}/direct-debits",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/direct-debits",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"direct-debits"
													]
												}
											},
											"response": []
										},
										{
											"name": "8005: TPP-API Hub:  GET accounts/{accountId}/beneficiaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/beneficiaries",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"beneficiaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "8006: TPP-API Hub: GET accounts/{accountId}/scheduled-payments",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/scheduled-payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"scheduled-payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "8007: TPP-API Hub: GET accounts/{accountId}/standing-orders",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/standing-orders",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"standing-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "8008: TPP-API Hub: GET accounts/{accountId}/product",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {},
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/product",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "8009: TPP-API Hub: GET /parties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/parties",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"parties"
													]
												}
											},
											"response": []
										},
										{
											"name": "8010: TPP-API Hub: GET accounts/{accountId}/parties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/parties",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"parties"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid accounts",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/account-access-consents?baseConsentId={{data-sharing-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"account-access-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{data-sharing-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/account-access-consents/{{data-sharing-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"account-access-consents",
														"{{data-sharing-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: PATCH consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"Data\": {\n        \"Status\": \"Revoked\",\n        \"RevokedBy\": \"TPP\"\n    },\n    \"Subscription\": {\n        \"Webhook\": {\n            \"Url\": \"http://localhost:4700/mock-event-receiver\",\n            \"IsActive\": true\n        }\n    }\n}"
												},
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/account-access-consents/{{data-sharing-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"account-access-consents",
														"{{data-sharing-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Revoke",
									"item": [
										{
											"name": "xxxx: LFI-API Hub: Revoke by consent Id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"disabled": true
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"revokedBy\": \"LFI\",\n    \"revokedByPsu\": {\n        \"userId\": \"{{userId}}\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}/action/revoke",
													"host": [
														"{{cs}}"
													],
													"path": [
														"v2024.46",
														"consents",
														"{{data-sharing-consent-id}}",
														"action",
														"revoke"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: LFI-API Hub: Revoke consent by consentGroupId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"disabled": true
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"revokedBy\": \"LFI\",\n    \"revokedByPsu\": {\n        \"userId\": \"{{userId}}\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{cs}}/v2024.46/consent-groups/{{data-sharing-base-consent-id}}/consents/action/revoke",
													"host": [
														"{{cs}}"
													],
													"path": [
														"v2024.46",
														"consent-groups",
														"{{data-sharing-base-consent-id}}",
														"consents",
														"action",
														"revoke"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Data Sharing APIs (application/jwt)",
					"item": [
						{
							"name": "TPP",
							"item": [
								{
									"name": "Data Sharing",
									"item": [
										{
											"name": "8000: TPP-API Hub: GET multiple accounts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 200) {",
															"    const CryptoJS = require('crypto-js');",
															"    var a = pm.response.text().split('.');",
															"    var words = CryptoJS.enc.Base64.parse(a[1]);",
															"    var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"    console.log(`bodyData: ${bodyData}`);",
															"    var jsonData = JSON.parse(bodyData);",
															"    pm.environment.set(\"account-id\", jsonData.message.Data.Account[0].AccountId);",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "8001: TPP-API Hub: GET accounts/{accountId}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "8002: TPP-API Hub: GET accounts/{accountId}/balances",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/balances",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "8003: TPP-API Hub: GET accounts/{accountId}/transactions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/transactions",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"transactions"
													],
													"query": [
														{
															"key": "fromBookingDateTime",
															"value": "2024-02-09",
															"disabled": true
														},
														{
															"key": "toBookingDateTime",
															"value": "2024-02-09",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "8004: TPP-API Hub: GET accounts/{accountId}/direct-debits",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/direct-debits",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"direct-debits"
													]
												}
											},
											"response": []
										},
										{
											"name": "8005: TPP-API Hub: GET accounts/{accountId}/beneficiaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/beneficiaries",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"beneficiaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "8006: TPP-API Hub: GET accounts/{accountId}/scheduled-payments",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/scheduled-payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"scheduled-payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "8007: TPP-API Hub: GET accounts/{accountId}/standing-orders",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/standing-orders",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"standing-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "8008: TPP-API Hub: GET accounts/{accountId}/product",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {},
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/product",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "8009: TPP-API Hub: GET /parties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/parties",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"parties"
													]
												}
											},
											"response": []
										},
										{
											"name": "8010: TPP-API Hub: GET accounts/{accountId}/parties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-accounts}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/parties",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"parties"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "Step 1_A: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 1_B: TPP-O3 - CCG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid accounts",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/account-access-consents?baseConsentId={{data-sharing-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"account-access-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{data-sharing-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "accept",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/account-access-consents/{{data-sharing-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"account-access-consents",
														"{{data-sharing-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Consent PATCH",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n  \r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "Accept",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/account-access-consents/{{data-sharing-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"account-access-consents",
														"{{data-sharing-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Service Initiation",
			"item": [
				{
					"name": "Single Instant Payment",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n                //                 {\n                //     \"CreditorAgent\": {\n                //         \"SchemeName\": \"IBAN\",\n                //         \"Identification\": \"10000109010103\",\n                //         \"Name\": \"Mario International\"\n                //     },\n                //     \"Creditor\": {\n                //         \"Name\": \"Mario International\"\n                //     },\n                //     \"CreditorAccount\": {\n                //         \"SchemeName\": \"AccountNumber\",\n                //         \"Identification\": \"10000109010103\",\n                //         \"Name\": {\n                //             \"en\": \"Mario International\"\n                //         }\n                //     }\n                // }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                } \n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}\n"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4())",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"Permissions\": [\"ReadRefundAccount\"],\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            }\n                        }\n                    },\n                    \"PaymentPurposeCode\": \"ACM\"\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"consentBody.Data.Status\": \"Authorized\",\r\n    \"authorizationChannel\": \"Web\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);",
													"",
													"// if(responseBody.includes(\"?code\")){",
													"//     pm.environment.set(\"authorizationCode\", responseBody.split(\"&\")[0].split(\"=\")[1]);",
													"// }"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "AuthFlow - with login_hint",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set('x-fapi-interaction-id', uuid.v4());",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													"",
													"function base64url(source) {",
													"    let encodedSource = CryptoJS.enc.Base64.stringify(source);",
													"    encodedSource = encodedSource.replace(/=+$/, '');",
													"    encodedSource = encodedSource.replace(/\\+/g, '-');",
													"    encodedSource = encodedSource.replace(/\\//g, '_');",
													"    return encodedSource;",
													"}",
													"",
													"const header = {",
													"    \"alg\": \"none\",",
													"    \"type\": \"JWT\"",
													"}",
													"",
													"const PIIPayload = {",
													"    \"Initiation\": {",
													"        \"CreditorAgent\": {",
													"            \"SchemeName\": \"AccountNumber\",",
													"            \"Identification\": \"10000109010101\",",
													"            \"Name\": \"Mario International\"",
													"        },",
													"        \"Creditor\": {",
													"            \"Name\": \"Mario International\"",
													"        },",
													"        \"CreditorAccount\": {",
													"            \"SchemeName\": \"AccountNumber\",",
													"            \"Identification\": \"10000109010101\",",
													"            \"Name\": \"Mario International\"",
													"        }",
													"    },",
													"    \"Risk\": {",
													"        \"DebtorIndicators\": {",
													"            \"UserName\": {",
													"                \"en\": \"xx\"",
													"            }",
													"        },",
													"        \"CreditorIndicators\": {",
													"            \"AccountType\": \"Retail\",",
													"            \"IsCreditorConfirmed\": true,",
													"            \"IsCreditorPrePopulated\": true,",
													"            \"TradingName\": \"xxx\"",
													"        }",
													"    }",
													"}",
													"",
													"const empty = {};",
													"",
													"const encodeHeader = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(header)));",
													"const encodePayload = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(PIIPayload)));",
													"const emptiness = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(empty)));",
													"",
													"const encodedPII = `${encodeHeader}.${encodePayload}.${emptiness}.${emptiness}.${emptiness}`;",
													"pm.environment.set(\"encryptedPII\", encodedPII);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('encryptedPII', pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted login_hint",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set('x-fapi-interaction-id', uuid.v4());",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													"",
													"function base64url(source) {",
													"    let encodedSource = CryptoJS.enc.Base64.stringify(source);",
													"    encodedSource = encodedSource.replace(/=+$/, '');",
													"    encodedSource = encodedSource.replace(/\\+/g, '-');",
													"    encodedSource = encodedSource.replace(/\\//g, '_');",
													"    return encodedSource;",
													"}",
													"",
													"const header = {",
													"    \"alg\": \"none\",",
													"    \"type\": \"JWT\"",
													"}",
													"",
													"const PIIPayload = {",
													"    \"Initiation\": {",
													"        \"CreditorAgent\": {",
													"            \"SchemeName\": \"AccountNumber\",",
													"            \"Identification\": \"10000109010101\",",
													"            \"Name\": \"Mario International\"",
													"        },",
													"        \"Creditor\": {",
													"            \"Name\": \"Mario International\"",
													"        },",
													"        \"CreditorAccount\": {",
													"            \"SchemeName\": \"AccountNumber\",",
													"            \"Identification\": \"10000109010101\",",
													"            \"Name\": \"Mario International\"",
													"        }",
													"    },",
													"    \"Risk\": {",
													"        \"DebtorIndicators\": {",
													"            \"UserName\": {",
													"                \"en\": \"xx\"",
													"            }",
													"        },",
													"        \"CreditorIndicators\": {",
													"            \"AccountType\": \"Retail\",",
													"            \"IsCreditorConfirmed\": true,",
													"            \"IsCreditorPrePopulated\": true,",
													"            \"TradingName\": \"xxx\"",
													"        }",
													"    }",
													"}",
													"",
													"const empty = {};",
													"",
													"const encodeHeader = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(header)));",
													"const encodePayload = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(PIIPayload)));",
													"const emptiness = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(empty)));",
													"",
													"const encryptedLoginHint = `${encodeHeader}.${encodePayload}.${emptiness}.${emptiness}.${emptiness}`;",
													"pm.environment.set(\"encryptedLoginHint\", encryptedLoginHint);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('encryptedLoginHint', pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Type\": \"TradeLicenceNumber\",\n        \"Identification\": \"8484848485858585\"\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4())",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"login_hint\": \"{{encryptedLoginHint}}\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            }\n                        }\n                    },\n                    \"PaymentPurposeCode\": \"ACM\" // Where are the ENUMS\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// List of strings to check",
													"const stringList = [",
													"    \"adibmobilebanking://adib/openfinance/auth\",",
													"    \"adcb://uat.mib.pn/auth\",",
													"    \"https://dev.emiratesnbd.com/external-login/auth\",",
													"    \"https://openbanking-uat.bankfab.com/ae/consumer/auth\"",
													"];",
													"",
													"let responseBody = authCodeUrl;",
													"// The value of A",
													"let A = authCodeUrl;",
													"",
													"// Replacement string B",
													"const B = pm.environment.get('authEndpoint');",
													"",
													"// Check and replace",
													"for (const str of stringList) {",
													"    if (authCodeUrl.includes(str)) {",
													"        responseBody = A.replace(str, B);",
													"        break; // Stops after the first match and replacement",
													"    }",
													"}",
													"",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													"console.log(pm.environment.get(\"authCodeUrl\"))",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"consentBody.Data.Status\": \"Authorized\",\r\n    \"authorizationChannel\": \"Web\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Single Instant Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\":",
															"                pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"150.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "8000: TPP-Hub: POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Single Instant Payment consents by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by consentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Consent PATCH",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Single Instant Payment with CoP",
					"item": [
						{
							"name": "AuthFlow - with CoP",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = pm.response.json();",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for COP endpoint",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
													"const now = Math.floor(Date.now() / 1000);",
													"const data1 = JSON.stringify({",
													"    \"aud\": [pm.environment.get(\"issuer\")],",
													"    \"iss\": pm.environment.get(\"_clientId\"),",
													"    \"iat\": now,",
													"    \"exp\": now + now,",
													"    \"nbf\": 0,",
													"    \"message\": {",
													"        \"Data\": {",
													"             \"NameMatchIndicator\": \"ConfirmationOfPayee.Yes\",",
													"             \"Name\": \"Ibrahim Al Suwaidi\"",
													"        },",
													"    }, ",
													"     \"Meta\": {},",
													"      \"Links\": {",
													"    \"Self\": \"http://localhost:4700/open-finance/confirmation-of-payee/v1.2/confirmation\"",
													"  }",
													"}",
													");",
													"pm.environment.set(\"data\", data1);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt_cop\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    },\n                    \"ConfirmationOfPayeeResponse\": \"{{private_key_jwt_cop}}\"\n                }\n                //                 {\n                //     \"CreditorAgent\": {\n                //         \"SchemeName\": \"IBAN\",\n                //         \"Identification\": \"10000109010103\",\n                //         \"Name\": \"Mario International\"\n                //     },\n                //     \"Creditor\": {\n                //         \"Name\": \"Mario International\"\n                //     },\n                //     \"CreditorAccount\": {\n                //         \"SchemeName\": \"AccountNumber\",\n                //         \"Identification\": \"10000109010103\",\n                //         \"Name\": {\n                //             \"en\": \"Mario International\"\n                //         }\n                //     }\n                // }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                } \n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}\n"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
													"",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4())",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            }\n                        }\n                    },\n                    \"PaymentPurposeCode\": \"ACM\"\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"consentBody.Data.Status\": \"Authorized\",\r\n    \"authorizationChannel\": \"Web\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);",
													"",
													"// if(responseBody.includes(\"?code\")){",
													"//     pm.environment.set(\"authorizationCode\", responseBody.split(\"&\")[0].split(\"=\")[1]);",
													"// }"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "AuthFlow - with login_hint",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set('x-fapi-interaction-id', uuid.v4());",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													"",
													"function base64url(source) {",
													"    let encodedSource = CryptoJS.enc.Base64.stringify(source);",
													"    encodedSource = encodedSource.replace(/=+$/, '');",
													"    encodedSource = encodedSource.replace(/\\+/g, '-');",
													"    encodedSource = encodedSource.replace(/\\//g, '_');",
													"    return encodedSource;",
													"}",
													"",
													"const header = {",
													"    \"alg\": \"none\",",
													"    \"type\": \"JWT\"",
													"}",
													"",
													"const PIIPayload = {",
													"    \"Initiation\": {",
													"        \"CreditorAgent\": {",
													"            \"SchemeName\": \"AccountNumber\",",
													"            \"Identification\": \"10000109010101\",",
													"            \"Name\": \"Mario International\"",
													"        },",
													"        \"Creditor\": {",
													"            \"Name\": \"Mario International\"",
													"        },",
													"        \"CreditorAccount\": {",
													"            \"SchemeName\": \"AccountNumber\",",
													"            \"Identification\": \"10000109010101\",",
													"            \"Name\": \"Mario International\"",
													"        }",
													"    },",
													"    \"Risk\": {",
													"        \"DebtorIndicators\": {",
													"            \"UserName\": {",
													"                \"en\": \"xx\"",
													"            }",
													"        },",
													"        \"CreditorIndicators\": {",
													"            \"AccountType\": \"Retail\",",
													"            \"IsCreditorConfirmed\": true,",
													"            \"IsCreditorPrePopulated\": true,",
													"            \"TradingName\": \"xxx\"",
													"        }",
													"    }",
													"}",
													"",
													"const empty = {};",
													"",
													"const encodeHeader = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(header)));",
													"const encodePayload = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(PIIPayload)));",
													"const emptiness = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(empty)));",
													"",
													"const encodedPII = `${encodeHeader}.${encodePayload}.${emptiness}.${emptiness}.${emptiness}`;",
													"pm.environment.set(\"encryptedPII\", encodedPII);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('encryptedPII', pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted login_hint",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set('x-fapi-interaction-id', uuid.v4());",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													"",
													"function base64url(source) {",
													"    let encodedSource = CryptoJS.enc.Base64.stringify(source);",
													"    encodedSource = encodedSource.replace(/=+$/, '');",
													"    encodedSource = encodedSource.replace(/\\+/g, '-');",
													"    encodedSource = encodedSource.replace(/\\//g, '_');",
													"    return encodedSource;",
													"}",
													"",
													"const header = {",
													"    \"alg\": \"none\",",
													"    \"type\": \"JWT\"",
													"}",
													"",
													"const PIIPayload = {",
													"    \"Initiation\": {",
													"        \"CreditorAgent\": {",
													"            \"SchemeName\": \"AccountNumber\",",
													"            \"Identification\": \"10000109010101\",",
													"            \"Name\": \"Mario International\"",
													"        },",
													"        \"Creditor\": {",
													"            \"Name\": \"Mario International\"",
													"        },",
													"        \"CreditorAccount\": {",
													"            \"SchemeName\": \"AccountNumber\",",
													"            \"Identification\": \"10000109010101\",",
													"            \"Name\": \"Mario International\"",
													"        }",
													"    },",
													"    \"Risk\": {",
													"        \"DebtorIndicators\": {",
													"            \"UserName\": {",
													"                \"en\": \"xx\"",
													"            }",
													"        },",
													"        \"CreditorIndicators\": {",
													"            \"AccountType\": \"Retail\",",
													"            \"IsCreditorConfirmed\": true,",
													"            \"IsCreditorPrePopulated\": true,",
													"            \"TradingName\": \"xxx\"",
													"        }",
													"    }",
													"}",
													"",
													"const empty = {};",
													"",
													"const encodeHeader = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(header)));",
													"const encodePayload = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(PIIPayload)));",
													"const emptiness = base64url(CryptoJS.enc.Utf8.parse(JSON.stringify(empty)));",
													"",
													"const encryptedLoginHint = `${encodeHeader}.${encodePayload}.${emptiness}.${emptiness}.${emptiness}`;",
													"pm.environment.set(\"encryptedLoginHint\", encryptedLoginHint);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set('encryptedLoginHint', pm.response.text());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Type\": \"TradeLicenceNumber\",\n        \"Identification\": \"8484848485858585\"\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4())",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"login_hint\": \"{{encryptedLoginHint}}\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            }\n                        }\n                    },\n                    \"PaymentPurposeCode\": \"ACM\" // Where are the ENUMS\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// List of strings to check",
													"const stringList = [",
													"    \"adibmobilebanking://adib/openfinance/auth\",",
													"    \"adcb://uat.mib.pn/auth\",",
													"    \"https://dev.emiratesnbd.com/external-login/auth\",",
													"    \"https://openbanking-uat.bankfab.com/ae/consumer/auth\"",
													"];",
													"",
													"let responseBody = authCodeUrl;",
													"// The value of A",
													"let A = authCodeUrl;",
													"",
													"// Replacement string B",
													"const B = pm.environment.get('authEndpoint');",
													"",
													"// Check and replace",
													"for (const str of stringList) {",
													"    if (authCodeUrl.includes(str)) {",
													"        responseBody = A.replace(str, B);",
													"        break; // Stops after the first match and replacement",
													"    }",
													"}",
													"",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													"console.log(pm.environment.get(\"authCodeUrl\"))",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"consentBody.Data.Status\": \"Authorized\",\r\n    \"authorizationChannel\": \"Web\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "accounts",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments - with CoP",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT for COP endpoint",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"             \"NameMatchIndicator\": \"ConfirmationOfPayee.No\",",
															"             \"Name\": \"Ibrahim Al Suwaidi\"",
															"        },",
															"    }, ",
															"     \"Meta\": {},",
															"      \"Links\": {",
															"    \"Self\": \"http://localhost:4700/open-finance/confirmation-of-payee/v1.2/confirmation\"",
															"  }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt_cop_02\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare Encrypted PII - Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n\n            },\n            \"ConfirmationOfPayeeResponse\": \"{{private_key_jwt_cop}}\"\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Single Instant Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\":",
															"                pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"150.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "8000: TPP-Hub: POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Single Instant Payment consents by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by consentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Consent PATCH",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Single Future Dated Payment",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010105\",\n            //     \"Name\": {\n            //         \"en\": \"Spectrum\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"pm.environment.set(\"today's_date\", new Date().toISOString().split('T')[0]);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const expectedPaymentDate = new Date(today);",
													"expectedPaymentDate.setDate(today.getDate() + 5);",
													"pm.environment.set(\"expected_Payment_Date\", expectedPaymentDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4());",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													"",
													"",
													"// Get the current date",
													"const currentDate = new Date();",
													"// Format the date to YYYY-MM-DD",
													"const formattedDate = currentDate.toISOString().split('T')[0];",
													"// Store the formatted date in an environment variable",
													"pm.environment.set(\"currentDateInRequest\", formattedDate);",
													"// Log the formatted date for debugging",
													"console.log(\"Generated Date: \", formattedDate);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"{{expected_Payment_Date}}\"\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"PaymentPurposeCode\": \"ACM\"\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"const uuid = require('uuid');"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 6003: Confirm with Heimdall",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Future Dated Payment Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"150.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET  payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Future Dated Payment payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Future Dated Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Future Dated Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Multi Payment - FixedDefinedSchedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010105\",\n            //     \"Name\": {\n            //         \"en\": \"Spectrum\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"",
													"const today = new Date();",
													"",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const dayAfterTomorrowDate = new Date(today);",
													"dayAfterTomorrowDate.setDate(today.getDate() + 2);",
													"pm.environment.set(\"day_after_tomorrow_date\", dayAfterTomorrowDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"2000.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedDefinedSchedule\",\n                                    \"Schedule\": [\n                                        {\n                                            \"PaymentExecutionDate\": \"{{tomorrows_date}}\",\n                                            \"Amount\": {\n                                                \"Amount\": \"500.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        },\n                                        {\n                                            \"PaymentExecutionDate\": \"{{day_after_tomorrow_date}}\",\n                                            \"Amount\": {\n                                                \"Amount\": \"500.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        }\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-01\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"10.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-02\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"10.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-04\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-05\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-06\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-07\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-08\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-09\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-10\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-11\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-12\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-13\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-05-15\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // }\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-03\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-04\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-05\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-06\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-07\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-08\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-09\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-10\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-11\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-12\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-13\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-14\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-15\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-16\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-17\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-18\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-19\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-20\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-21\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-22\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-23\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-24\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-25\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-26\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-27\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-28\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-29\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-30\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-01-31\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-01\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-02\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-03\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-04\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-05\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-06\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-07\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"10.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-08\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"10.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-09\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"10.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // },\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2025-02-10\",\n                                        //     \"Amount\": {\n                                        //         \"Amount\": \"20.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // }\n                                    ]\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"// encode the url",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Fixed Defined Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"500.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Fixed Defined Payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Fixed Defined Payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Fixed Defined Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Fixed Defined Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Multi Payment - VariableDefinedSchedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const dayAfterTomorrowDate = new Date(today);",
													"dayAfterTomorrowDate.setDate(today.getDate() + 2);",
													"pm.environment.set(\"day_after_tomorrow_date\", dayAfterTomorrowDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"MultiPayment\": {\n                                // \"MaximumCumulativeNumberOfPayments\": 2,\n                                // \"MaximumCumulativeValueOfPayments\": {\n                                //     \"Amount\": \"300.00\",\n                                //     \"Currency\": \"AED\"\n                                // },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariableDefinedSchedule\",\n                                    \"Schedule\": [\n                                        {\n                                            \"PaymentExecutionDate\": \"{{tomorrows_date}}\",\n                                            \"MaximumIndividualAmount\": {\n                                                \"Amount\": \"500.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        },\n                                        {\n                                            \"PaymentExecutionDate\": \"{{day_after_tomorrow_date}}\",\n                                            \"MaximumIndividualAmount\": {\n                                                \"Amount\": \"500.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        }\n                                        // {\n                                        //     \"PaymentExecutionDate\": \"2024-12-27\",\n                                        //     \"MaximumIndividualAmount\": {\n                                        //         \"Amount\": \"100.00\",\n                                        //         \"Currency\": \"AED\"\n                                        //     }\n                                        // }\n                                    ]\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Variable Defined Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"300.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Variable Defined Payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Variable Defined Payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Variable Defined Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Variable Defined Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Multi Payment - Fixed Periodic Schedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"",
													"pm.environment.set(\"today's_date\", new Date().toISOString().split('T')[0]);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedPeriodicSchedule\",\n                                    \"PeriodType\": \"Day\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Amount\": {\n                                        \"Amount\": \"400.00\",\n                                        \"Currency\": \"AED\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                     \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Fixed Periodic Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"400.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Fixed Periodic Payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Fixed Periodic Payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Fixed Periodic Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Fixed Periodic Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Multi Payment - Variable Periodic Schedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"500.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariablePeriodicSchedule\",\n                                    \"PeriodType\": \"Week\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"MaximumIndividualAmount\": {\n                                        \"Amount\": \"100.00\",\n                                        \"Currency\": \"AED\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": true\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"const uuid = require('uuid');"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Variable Periodic Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"50.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Variable Periodic Payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Variable Periodic Payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Variable Periodic Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Variable Periodic Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Multi Payment - FixedOnDemand",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:59:59.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"400.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedOnDemand\",\n                                    \"PeriodType\": \"Month\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Amount\": {\n                                        \"Amount\": \"200.00\",\n                                        \"Currency\": \"AED\"\n                                    },\n                                    \"Controls\": {\n                                        \"MaximumCumulativeNumberOfPaymentsPerPeriod\": 1,\n                                        \"MaximumCumulativeValueOfPaymentsPerPeriod\": {\n                                            \"Amount\": \"200.00\",\n                                            \"Currency\": \"AED\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Fixed On Demand Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"200.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Fixed On Demand Payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Fixed On Demand Payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Fixed On Demand Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Fixed On Demand Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Multi Payment - VariableOnDemand",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"500.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariableOnDemand\",\n                                    \"PeriodType\": \"Week\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Controls\": {\n                                        \"MaximumIndividualAmount\": {\n                                            \"Amount\": \"200.00\",\n                                            \"Currency\": \"AED\"\n                                        },\n                                        \"MaximumCumulativeNumberOfPaymentsPerPeriod\": 2,\n                                        \"MaximumCumulativeValueOfPaymentsPerPeriod\": {\n                                            \"Amount\": \"200.00\",\n                                            \"Currency\": \"AED\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Variable On Demand Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Variable On Demand Payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Variable On Demand Payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Variable On Demand Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Variable On Demand Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Payment Consent Refund",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4())",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"Permissions\": [\"ReadRefundAccount\"],\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            }\n                        }\n                    },\n                    \"PaymentPurposeCode\": \"ACM\" // Where are the ENUMS\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"const uuid = require('uuid');"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=37ab0f6e-ecee-4f3b-a99d-2d876df1dcbc,OU=73423662-b345-453e-a54b-2f9115a6a45d,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=37ab0f6e-ecee-4f3b-a99d-2d876df1dcbc,OU=73423662-b345-453e-a54b-2f9115a6a45d,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=37ab0f6e-ecee-4f3b-a99d-2d876df1dcbc,OU=73423662-b345-453e-a54b-2f9115a6a45d,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9001: GET Payment Consent Refund",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "Sat, 15 Mar 2025 19:43:31 UTC",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "192.168.1.1",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-customer-user-agent",
														"value": "Chrome/114.0.5735.110",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}/refund",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}",
														"refund"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "LFI Payment Patch",
					"item": [
						{
							"name": "Payment-log Patch",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentResponse.status\": \"Rejected\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cs}}/v2024.46/payment-log/{{paymentId}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"payment-log",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment-log Patch Copy",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentResponse.status\": \"AcceptedCreditSettlementCompleted\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cs}}/GET /payment-log?consentId={{service-initiation-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"GET ",
										"payment-log"
									],
									"query": [
										{
											"key": "consentId",
											"value": "{{service-initiation-consent-id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Revoke",
					"item": [
						{
							"name": "xxxx: LFI-API Hub: Revoke by consent Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set uuid and time",
											"pm.environment.set(\"now\", (new Date()).toUTCString());",
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"revokedBy\": \"LFI\",\n    \"revokedByPsu\": {\n        \"userId\": \"{{userId}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}/action/revoke",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{service-initiation-consent-id}}",
										"action",
										"revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "xxxx: LFI-API Hub: Revoke consent by consentGroupId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set uuid and time",
											"pm.environment.set(\"now\", (new Date()).toUTCString());",
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"revokedBy\": \"LFI\",\n    \"revokedByPsu\": {\n        \"userId\": \"{{userId}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consent-groups/{{service-initiation-base-consent-id}}/consents/action/revoke",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consent-groups",
										"{{service-initiation-base-consent-id}}",
										"consents",
										"action",
										"revoke"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "File Payment",
			"item": [
				{
					"name": "AuthFlow",
					"item": [
						{
							"name": "Step 1000: Get OIDC well-known end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
											"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
											"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
											"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid payments",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{issuer}}/.well-known/openid-configuration",
									"host": [
										"{{issuer}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare Encrypted PII",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const CryptoJS = require('crypto-js');",
											"const uuid = require('uuid');",
											"",
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
											"",
											"console.log(codeChallenge);",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge);",
											"pm.environment.set(\"code-verifier\", codeVerifier);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"encryptedPII\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-encryption",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-encryption"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3000-A: Prepare request object JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const today = new Date();",
											"const futureDate = new Date(today);",
											"futureDate.setDate(today.getDate() + 30);",
											"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
											"",
											"const uuid = require('uuid');",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
											"console.log(codeChallenge);",
											"",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge );",
											"pm.environment.set(\"code-verifier\", codeVerifier );",
											"",
											"const fileContent =[",
											"      {",
											"         \"Creditor\":\"10000119820101\",",
											"         \"amount\":\"100.50\",",
											"         \"Description\":\"Salary for Dec1, 2018\"",
											"      },",
											"      {",
											"         \"Creditor\":\"10000119820101\",",
											"         \"amount\":\"100.50\",",
											"         \"Description\":\"Salary for Dec1, 2018\"",
											"      },",
											"      {",
											"         \"Creditor\":\"10000119820101\",",
											"         \"amount\":\"100.50\",",
											"         \"Description\":\"Salary for Dec1, 2018\"",
											"      },",
											"      {",
											"         \"Creditor\":\"10000119820101\",",
											"         \"amount\":\"100.50\",",
											"         \"Description\":\"Salary for Dec1, 2018\"",
											"      }",
											"   ]",
											"   const strFileContent = JSON.stringify(fileContent);",
											"   pm.environment.set(\"fileContent\", strFileContent);",
											"",
											"      ",
											"const hashedFile = CryptoJS.SHA256(strFileContent);",
											"let fileHash = CryptoJS.enc.Base64.stringify(hashedFile);",
											"pm.environment.set(\"fileHash\", fileHash);",
											"",
											"let now = new Date();",
											"let formattedDate = now.toISOString();",
											"pm.environment.set(\"currentDateTime\", formattedDate);",
											"console.log(\"Generated Date-Time:\", formattedDate);",
											"",
											"let currentTime = Math.floor(Date.now() / 1000);",
											"pm.environment.set(\"nbf\", currentTime);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is valid\", function () {",
											"    pm.response.to.have.status(200);",
											"    if (pm.response.code === 200) {",
											"        pm.environment.set(\"requestObject\", responseBody);",
											"    }",
											"});",
											"",
											"//  pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"// pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"",
											"var a = responseBody.split('.');",
											"var words = CryptoJS.enc.Base64.parse(a[1]);",
											"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
											"console.log(bodyData);",
											"var jsonData = JSON.parse(bodyData);",
											"console.log(jsonData);",
											"",
											"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"FilePayment\": {\n                                \"FileType\": \"x\",\n                                \"FileHash\": \"{{fileHash}}\",\n                                \"FileReference\": \"GB2OK238\",\n                                \"NumberOfTransactions\": 4,\n                                \"ControlSum\": \"402.00\"\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": true\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3000-B: Prepare private key JWT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const uuid = require('uuid');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 4000: POST to PAR end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"par-urn\", jsonData.request_uri);",
											"",
											"const clientId = pm.environment.get(\"_clientId\");",
											"",
											"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
											"",
											"const response_type = postman.getEnvironmentVariable('response_type');",
											"",
											"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
											"",
											"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{_clientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{requestObject}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{par-endpoint}}",
									"host": [
										"{{par-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5004: LFI-API Hub: /auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
											"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authCodeUrl}}",
									"host": [
										"{{authCodeUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5015: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-cert-dn",
										"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{service-initiation-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6005: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
										"disabled": true
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{service-initiation-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 6003: Confirm with Heimdall",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"authorizationCode\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "heimdall.suppressRefreshToken",
											"value": "false",
											"type": "text"
										},
										{
											"key": "heimdall.accessTokenValidity",
											"value": "3600",
											"type": "text",
											"disabled": true
										},
										{
											"key": "heimdall.refreshTokenValidity",
											"value": "7200",
											"type": "text",
											"disabled": true
										},
										{
											"key": "openbanking_intent_id",
											"value": "{{consent-id-from-hh}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
									"host": [
										"{{auth-endpoint}}"
									],
									"path": [
										"{{interaction-id}}",
										"doConfirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 7000: TPP-O3 - Auth Code Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorizationCode}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirectUrl}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code-verifier}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								},
								"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TPP",
					"item": [
						{
							"name": "Upload file for consent",
							"item": [
								{
									"name": "O3 Util: Prepare private key JWT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"const uuid = require('uuid');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "xxxx: TPP-O3: Client Credential Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default",
													"disabled": true
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								},
								{
									"name": "Step 3: POST file-payment-consents/{ConsentId}/file",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"now\", (new Date()).toUTCString());",
													"const uuid = require('uuid');",
													"pm.environment.set(\"interactionId\", uuid.v4());"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followOriginalHttpMethod": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "x-fapi-financial-id",
												"value": "{{obParticipantId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-last-logged-time",
												"value": "{{now}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "10.1.1.10",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
												"type": "text"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{x-idempotency-key}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "Sat, 15 Mar 2025 19:43:31 UTC",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-customer-user-agent",
												"value": "Chrome/114.0.5735.110",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{fileContent}}"
										},
										"url": {
											"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}/file",
											"host": [
												"{{rs}}"
											],
											"path": [
												"open-finance",
												"payment",
												"v1.2",
												"payment-consents",
												"{{service-initiation-consent-id}}",
												"file"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Payments",
							"item": [
								{
									"name": "Step 8000: Prepare PIS request JWT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"pm.environment.set(\"interactionId\", uuid.v4());",
													"const now = Math.floor(Date.now() / 1000);",
													"const data = JSON.stringify({",
													"    \"aud\": [pm.environment.get(\"issuer\")],",
													"    \"iss\": pm.environment.get(\"_clientId\"),",
													"    \"exp\": now + now,",
													"    \"iat\": now,",
													"    \"nbf\": 0,",
													"    \"message\": {",
													"        \"Data\": {",
													"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
													"            \"Instruction\": {",
													"                \"FileType\": \"x\",",
													"                \"FileHash\": pm.environment.get(\"fileHash\"),",
													"                \"FileReference\": \"GB2OK238\",",
													"                \"NumberOfTransactions\": 4,",
													"                \"ControlSum\": \"402.00\"",
													"            },",
													"            // \"CurrencyRequest\": {",
													"            //     \"InstructionPriority\": \"Normal\",",
													"            //     \"ExtendedPurpose\": \"string\",",
													"            //     \"ChargeBearer\": \"BorneByCreditor\",",
													"            //     \"CurrencyOfTransfer\": \"NHK\",",
													"            //     \"DestinationCountryCode\": \"EE\",",
													"            //     \"ExchangeRateInformation\": {",
													"            //         \"UnitCurrency\": \"WUZ\",",
													"            //         \"ExchangeRate\": 0,",
													"            //         \"RateType\": \"Actual\",",
													"            //         \"ContractIdentification\": \"string\"",
													"            //     }",
													"            // },",
													"            // \"PersonalIdentifiableInformation\": \"eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ....\",",
													"            \"PaymentPurposeCode\": \"ACM\",",
													"            // \"DebtorReference\": \"TPP=987e6543-e21b-34d3-b987-654321234567,BIC=WXYZ12UVG890\",",
													"            // \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
													"        }",
													"    }",
													"}",
													");",
													"pm.environment.set(\"data\", data);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"pis_request_body_jwt\", responseBody);",
													"",
													"// function isValidJwt(token) {",
													"//     const parts = token.split('.');",
													"//     // A valid JWT should have exactly three parts separated by periods",
													"//     return parts.length === 3;",
													"// }",
													"",
													"// function parseJwt(token, part) {",
													"//     var base64Url = token.split('.')[part];",
													"//     var words = CryptoJS.enc.Base64.parse(base64Url);",
													"//     var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
													"//     return JSON.parse(jsonPayload);",
													"// }",
													"",
													"// function stringifyNestedObjects(obj) {",
													"//     for (var key in obj) {",
													"//         if (typeof obj[key] === 'object' && obj[key] !== null) {",
													"//             obj[key] = JSON.stringify(obj[key], null, 2); // Format the JSON with indentation",
													"//         }",
													"//     }",
													"//     return obj;",
													"// }",
													"",
													"// if (!isValidJwt(responseBody)) {",
													"//     return;",
													"// } ",
													"",
													"// var jwtInfo = {};",
													"// jwtInfo.size = responseBody.length;",
													"// jwtInfo.header = stringifyNestedObjects(parseJwt(responseBody, 0));",
													"// jwtInfo.payload = stringifyNestedObjects(parseJwt(responseBody, 1));",
													"// jwtInfo.signature = responseBody.split('.')[2];",
													"// jwtInfo.expires = ((jwtInfo.payload.exp - Date.now().valueOf() / 1000) / 60).toFixed(1);",
													"",
													"// console.log(jwtInfo);",
													"",
													"// var template = `",
													"// <style>",
													"//     body {",
													"//     font-family: Arial, sans-serif;",
													"//     padding: 20px;",
													"//     }",
													"//     table {",
													"//     border-collapse: collapse;",
													"//     width: 100%;",
													"//     margin-bottom: 20px;",
													"//     }",
													"//     table, th, td {",
													"//     border: 1px solid #ddd;",
													"//     padding: 8px;",
													"//     }",
													"//     th {",
													"//     background-color: #f2f2f2;",
													"//     text-align: left;",
													"//     }",
													"//     tr:nth-child(even) {",
													"//     background-color: #f9f9f9;",
													"//     }",
													"//     .header {",
													"//     font-weight: bold;",
													"//     font-size: 1.2em;",
													"//     margin-bottom: 10px;",
													"//     }",
													"//     .signature {",
													"//     margin-top: 20px;",
													"//     font-style: italic;",
													"//     }",
													"//     pre {",
													"//     background-color: #f9f9f9;",
													"//     padding: 10px;",
													"//     border: 1px solid #ddd;",
													"//     }",
													"// </style>",
													"",
													"// <div class=\"header\">JWT Size: {{response.size}} Bytes. Expires in {{response.expires}} minutes</div>",
													"",
													"// <b>Header</b>",
													"// <table>",
													"//     <tr><th>Property</th><th>Value</th></tr>",
													"//     {{#each response.header}}",
													"//         <tr><td>{{@key}}</td><td>{{this}}</td></tr>",
													"//     {{/each}}",
													"// </table>",
													"",
													"// <b>Payload</b>",
													"// <table>",
													"//     <tr><th>Property</th><th>Value</th></tr>",
													"//     {{#each response.payload}}",
													"//         <tr><td>{{@key}}</td><td>{{this}}</td></tr>",
													"//     {{/each}}",
													"// </table>",
													"",
													"// <b>Message</b>",
													"// <pre>{{response.payload.message}}</pre> <!-- Render the formatted JSON in <pre> for readability -->",
													"",
													"// <div class=\"signature\">Signature: {{response.signature}}</div>",
													"// `;",
													"",
													"// pm.visualizer.set(template, { response: jwtInfo });"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step: 9000 POST file payment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"var jsonData = JSON.parse(bodyData);",
													"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// const xIdempotencyKey = $guid;",
													"// console.log(`${xIdempotencyKey}`);",
													"",
													"var uuid = require('uuid');",
													"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
													"console.log(`${pm.environment.get('x-idempotency-key')}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followOriginalHttpMethod": false
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/jwt",
												"type": "text"
											},
											{
												"key": "x-fapi-financial-id",
												"value": "{{obParticipantId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "10.1.1.10",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token-from-auth-code-grant-payments}}",
												"type": "text"
											},
											{
												"key": "x-jws-signature",
												"value": "{{signature}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-idempotency-key",
												"value": "{{x-idempotency-key}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "Sat, 15 Mar 2025 19:43:31 UTC",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-customer-user-agent",
												"value": "Chrome/114.0.5735.110",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{pis_request_body_jwt}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rs}}/open-finance/payment/v1.2/file-payments",
											"host": [
												"{{rs}}"
											],
											"path": [
												"open-finance",
												"payment",
												"v1.2",
												"file-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "1002: O3 Util: Prepare private key JWT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"const uuid = require('uuid');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "1003: TPP-O3: Client Credential Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default",
													"disabled": true
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								},
								{
									"name": "xxxx: TPP-API Hub: GET file payment by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followOriginalHttpMethod": false
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/jwt",
												"type": "text"
											},
											{
												"key": "x-fapi-financial-id",
												"value": "{{obParticipantId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "10.1.1.10",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
												"type": "text"
											},
											{
												"key": "x-jws-signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "x-idempotency-key",
												"value": "",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-auth-date",
												"value": "Sat, 15 Mar 2025 19:43:31 UTC",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-customer-user-agent",
												"value": "Chrome/114.0.5735.110",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{rs}}/open-finance/payment/v1.2/file-payments/{{paymentId}}",
											"host": [
												"{{rs}}"
											],
											"path": [
												"open-finance",
												"payment",
												"v1.2",
												"file-payments",
												"{{paymentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 10000b: GET file payment by xIdempotencyKey",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followOriginalHttpMethod": false,
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/jwt",
												"type": "text"
											},
											{
												"key": "x-fapi-financial-id",
												"value": "{{obParticipantId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "10.1.1.10",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
												"type": "text"
											},
											{
												"key": "x-jws-signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{x-idempotency-key}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "Sat, 15 Mar 2025 19:43:31 UTC",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-customer-user-agent",
												"value": "Chrome/114.0.5735.110",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{rs}}/open-finance/payment/v1.2/file-payments",
											"host": [
												"{{rs}}"
											],
											"path": [
												"open-finance",
												"payment",
												"v1.2",
												"file-payments"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step: 10000c GET file payment report",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"followOriginalHttpMethod": false
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/jwt",
												"type": "text"
											},
											{
												"key": "x-fapi-financial-id",
												"value": "{{obParticipantId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "10.1.1.10",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
												"type": "text"
											},
											{
												"key": "x-jws-signature",
												"value": "{{signature}}",
												"type": "text"
											},
											{
												"key": "x-idempotency-key",
												"value": "{{x-idempotency-key}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "Sat, 15 Mar 2025 19:43:31 UTC",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-customer-user-agent",
												"value": "Chrome/114.0.5735.110",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{rs}}/open-finance/payment/v1.2/file-payments/{{paymentId}}/report",
											"host": [
												"{{rs}}"
											],
											"path": [
												"open-finance",
												"payment",
												"v1.2",
												"file-payments",
												"{{paymentId}}",
												"report"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Consents",
							"item": [
								{
									"name": "O3 Util: Prepare private key JWT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"const uuid = require('uuid');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "xxxx: TPP-O3: Client Credential Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default",
													"disabled": true
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								},
								{
									"name": "Step 9000: GET File payment consent by baseConsentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "Sat, 15 Mar 2025 19:43:31 UTC",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "192.168.1.1",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-customer-user-agent",
												"value": "Chrome/114.0.5735.110",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
											"host": [
												"{{rs}}"
											],
											"path": [
												"open-finance",
												"payment",
												"v1.2",
												"payment-consents"
											],
											"query": [
												{
													"key": "baseConsentId",
													"value": "{{service-initiation-base-consent-id}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 9001: GET File payment consent by consentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "Sat, 15 Mar 2025 19:43:31 UTC",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "192.168.1.1",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-customer-user-agent",
												"value": "Chrome/114.0.5735.110",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
											"host": [
												"{{rs}}"
											],
											"path": [
												"open-finance",
												"payment",
												"v1.2",
												"payment-consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 9002-a: Sign (PATCH) payment consents",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const uuid = require('uuid');",
													"pm.environment.set(\"interactionId\", uuid.v4());",
													"const now = Math.floor(Date.now() / 1000);",
													"",
													"const data1 = JSON.stringify({",
													"    \"aud\": pm.environment.get(\"issuer\"),",
													"    \"iss\": pm.environment.get(\"_clientId\"),",
													"    \"jti\": uuid.v4(),",
													"    \"iat\": now,",
													"    \"exp\": now + now,",
													"    \"nbf\": 0,",
													"",
													"    \"message\": {",
													"        \"Data\": {",
													"            \"Status\": \"Revoked\",",
													"            \"RevokedBy\": \"TPP\"",
													"        },",
													"        \"Subscription\": {",
													"            \"Webhook\": {",
													"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
													"                \"IsActive\": true",
													"            }",
													"        }",
													"    }",
													"});",
													"",
													"pm.environment.set(\"data\", data1);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "xxxx: PATCH: PATCH File payment consents",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/jwt",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "Sat, 15 Mar 2025 19:43:31 UTC",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "192.168.1.1",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-customer-user-agent",
												"value": "Chrome/114.0.5735.110",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{signedPatchConsentJwt}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
											"host": [
												"{{rs}}"
											],
											"path": [
												"open-finance",
												"payment",
												"v1.2",
												"payment-consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Combined Payments -Service Initiation",
			"item": [
				{
					"name": "SIP -  FixedDefinedSchedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const dayAfterTomorrowDate = new Date(today);",
													"dayAfterTomorrowDate.setDate(today.getDate() + 2);",
													"pm.environment.set(\"day_after_tomorrow_date\", dayAfterTomorrowDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"200.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 10,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedDefinedSchedule\",\n                                    \"Schedule\": [\n                                        {\n                                            \"PaymentExecutionDate\": \"{{tomorrows_date}}\",\n                                            \"Amount\": {\n                                                \"Amount\": \"100.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        },\n                                        {\n                                            \"PaymentExecutionDate\": \"{{day_after_tomorrow_date}}\",\n                                            \"Amount\": {\n                                                \"Amount\": \"20.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "8000: TPP-Hub: POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "SIP - VariableDefinedSchedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"revocation_endpoint\", jsonData.revocation_endpoint);",
													"pm.environment.set(\"cdr_arrangement_revocation_endpoint\", jsonData.cdr_arrangement_revocation_endpoint);",
													"// pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const dayAfterTomorrowDate = new Date(today);",
													"dayAfterTomorrowDate.setDate(today.getDate() + 2);",
													"pm.environment.set(\"day_after_tomorrow_date\", dayAfterTomorrowDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"200.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 1,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariableDefinedSchedule\",\n                                    \"Schedule\": [\n                                        {\n                                            \"PaymentExecutionDate\": \"{{tomorrows_date}}\",\n                                            \"MaximumIndividualAmount\": {\n                                                \"Amount\": \"100.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        },\n                                        {\n                                            \"PaymentExecutionDate\": \"{{day_after_tomorrow_date}}\",\n                                            \"MaximumIndividualAmount\": {\n                                                \"Amount\": \"200.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"300.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}",
														"disabled": true
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        }",
															"        // \"Subscription\": {",
															"        //     \"Webhook\": {",
															"        //         \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"        //         \"IsActive\": false",
															"        //     }",
															"        // }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "SIP - Variable Periodic Schedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"200.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"500.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariablePeriodicSchedule\",\n                                    \"PeriodType\": \"Week\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"MaximumIndividualAmount\": {\n                                        \"Amount\": \"200.00\",\n                                        \"Currency\": \"AED\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": true\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}",
														"disabled": true
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "SIP - Fixed Periodic Schedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                             \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"200.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 3,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedPeriodicSchedule\",\n                                    \"PeriodType\": \"Month\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Amount\": {\n                                        \"Amount\": \"100.00\",\n                                        \"Currency\": \"AED\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                     \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}",
														"disabled": true
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "SIP - FixedOnDemand",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:59:59.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"200.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"400.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedOnDemand\",\n                                    \"PeriodType\": \"Month\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Amount\": {\n                                        \"Amount\": \"100.00\",\n                                        \"Currency\": \"AED\"\n                                    },\n                                    \"Controls\": {\n                                        \"MaximumCumulativeNumberOfPaymentsPerPeriod\": 1,\n                                        \"MaximumCumulativeValueOfPaymentsPerPeriod\": {\n                                            \"Amount\": \"200.00\",\n                                            \"Currency\": \"AED\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "6130d9e3-afbd-4262-b390-e604507c1944",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "SIP - VariableOnDemand",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"200.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 4,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"500.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariableOnDemand\",\n                                    \"PeriodType\": \"Day\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Controls\": {\n                                        \"MaximumIndividualAmount\": {\n                                            \"Amount\": \"400.00\",\n                                            \"Currency\": \"AED\"\n                                        },\n                                        \"MaximumCumulativeNumberOfPaymentsPerPeriod\": 3,\n                                        \"MaximumCumulativeValueOfPaymentsPerPeriod\": {\n                                            \"Amount\": \"200.00\",\n                                            \"Currency\": \"AED\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "SFDP - FixedDefinedSchedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const expectedPaymentDate = new Date(today);",
													"expectedPaymentDate.setDate(today.getDate() + 5);",
													"pm.environment.set(\"expected_Payment_Date\", expectedPaymentDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const dayAfterTomorrowDate = new Date(today);",
													"dayAfterTomorrowDate.setDate(today.getDate() + 2);",
													"pm.environment.set(\"day_after_tomorrow_date\", dayAfterTomorrowDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                             \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"{{expected_Payment_Date}}\"\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 10,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedDefinedSchedule\",\n                                    \"Schedule\": [\n                                        {\n                                            \"PaymentExecutionDate\": \"{{tomorrows_date}}\",\n                                            \"Amount\": {\n                                                \"Amount\": \"100.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        },\n                                        {\n                                            \"PaymentExecutionDate\": \"{{day_after_tomorrow_date}}\",\n                                            \"Amount\": {\n                                                \"Amount\": \"20.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                     \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "SFDP - VariableDefinedSchedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const expectedPaymentDate = new Date(today);",
													"expectedPaymentDate.setDate(today.getDate() + 5);",
													"pm.environment.set(\"expected_Payment_Date\", expectedPaymentDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const dayAfterTomorrowDate = new Date(today);",
													"dayAfterTomorrowDate.setDate(today.getDate() + 2);",
													"pm.environment.set(\"day_after_tomorrow_date\", dayAfterTomorrowDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"{{expected_Payment_Date}}\"\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 1,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariableDefinedSchedule\",\n                                    \"Schedule\": [\n                                        {\n                                            \"PaymentExecutionDate\": \"{{tomorrows_date}}\",\n                                            \"MaximumIndividualAmount\": {\n                                                \"Amount\": \"100.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        },\n                                        {\n                                            \"PaymentExecutionDate\": \"{{day_after_tomorrow_date}}\",\n                                            \"MaximumIndividualAmount\": {\n                                                \"Amount\": \"200.00\",\n                                                \"Currency\": \"AED\"\n                                            }\n                                        }\n                                    ]\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                     \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"300.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}",
														"disabled": true
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        }",
															"        // \"Subscription\": {",
															"        //     \"Webhook\": {",
															"        //         \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"        //         \"IsActive\": false",
															"        //     }",
															"        // }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "SFDP - Fixed Periodic Schedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const expectedPaymentDate = new Date(today);",
													"expectedPaymentDate.setDate(today.getDate() + 5);",
													"pm.environment.set(\"expected_Payment_Date\", expectedPaymentDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"{{expected_Payment_Date}}\"\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 3,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedPeriodicSchedule\",\n                                    \"PeriodType\": \"Month\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Amount\": {\n                                        \"Amount\": \"100.00\",\n                                        \"Currency\": \"AED\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                     \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}",
														"disabled": true
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "SFDP - Variable Periodic Schedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const expectedPaymentDate = new Date(today);",
													"expectedPaymentDate.setDate(today.getDate() + 5);",
													"pm.environment.set(\"expected_Payment_Date\", expectedPaymentDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"{{expected_Payment_Date}}\"\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"500.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariablePeriodicSchedule\",\n                                    \"PeriodType\": \"Month\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"MaximumIndividualAmount\": {\n                                        \"Amount\": \"200.00\",\n                                        \"Currency\": \"AED\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var tenant = 'ALLICA';",
											"",
											"const usersByBank = {",
											"    ALLICA: [{",
											"        psuIdentifiers: {",
											"            userId: \"100001000000000000000002\"",
											"",
											"        },",
											"",
											"        accountIds: [",
											"            \"100004000000000000000002\"",
											"            // \"100004000000000000000003\",",
											"            // \"100004000000000000000004\",",
											"            // \"100004000000000000000005\",",
											"        ]",
											"    }],",
											"",
											"}",
											"const userDetails = usersByBank[tenant][0];",
											"",
											"pm.environment.set('userId', userDetails.psuIdentifiers.userId);",
											"pm.environment.set('accountIds', JSON.stringify(userDetails.accountIds));",
											"pm.environment.set('accountIdsPayment', JSON.stringify(userDetails.accountIds[0]));",
											"",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}",
														"disabled": true
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "SFDP - FixedOnDemand",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const expectedPaymentDate = new Date(today);",
													"expectedPaymentDate.setDate(today.getDate() + 5);",
													"pm.environment.set(\"expected_Payment_Date\", expectedPaymentDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:59:59.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"{{expected_Payment_Date}}\"\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 2,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"400.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedOnDemand\",\n                                    \"PeriodType\": \"Month\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Amount\": {\n                                        \"Amount\": \"100.00\",\n                                        \"Currency\": \"AED\"\n                                    },\n                                    \"Controls\": {\n                                        \"MaximumCumulativeNumberOfPaymentsPerPeriod\": 1,\n                                        \"MaximumCumulativeValueOfPaymentsPerPeriod\": {\n                                            \"Amount\": \"200.00\",\n                                            \"Currency\": \"AED\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "6130d9e3-afbd-4262-b390-e604507c1944",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "SFDP - VariableOnDemand",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const expectedPaymentDate = new Date(today);",
													"expectedPaymentDate.setDate(today.getDate() + 5);",
													"pm.environment.set(\"expected_Payment_Date\", expectedPaymentDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                             \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"{{expected_Payment_Date}}\"\n                            },\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 4,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"500.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"VariableOnDemand\",\n                                    \"PeriodType\": \"Day\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Controls\": {\n                                        \"MaximumIndividualAmount\": {\n                                            \"Amount\": \"400.00\",\n                                            \"Currency\": \"AED\"\n                                        },\n                                        \"MaximumCumulativeNumberOfPaymentsPerPeriod\": 3,\n                                        \"MaximumCumulativeValueOfPaymentsPerPeriod\": {\n                                            \"Amount\": \"200.00\",\n                                            \"Currency\": \"AED\"\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8000: Prepare PIS request JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"100.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 10000a: GET payment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 10000b: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-jws-signature",
														"value": "{{signature}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "Step 9000: GET payment consent by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-b: PATCH payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.0/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.0",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "LFI Payment Patch",
					"item": [
						{
							"name": "Payment-log Patch",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentResponse.status\":\"AcceptedSettlementCompleted\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cs}}/v2024.46/payment-log/{{paymentId}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"payment-log",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Service Initiation - International Payments",
			"item": [
				{
					"name": "Single Instant Payment",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4())",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"CurrencyRequest\": {\n                        \"InstructionPriority\": \"Normal\",\n                        \"ExtendedPurpose\": \"string\",\n                        \"ChargeBearer\": \"BorneByCreditor\",\n                        \"CurrencyOfTransfer\": \"AED\",\n                        \"DestinationCountryCode\": \"GG\",\n                        \"ExchangeRateInformation\": {\n                            \"UnitCurrency\": \"WUZ\",\n                            \"ExchangeRate\": 0,\n                            \"RateType\": \"Actual\",\n                            \"ContractIdentification\": \"string\"\n                        }\n                    },\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            }\n                        }\n                    },\n                    \"PaymentPurposeCode\": \"ACM\"\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\":",
															"                pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"150.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "8000: TPP-Hub: POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by consentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Consent PATCH",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Single Future Dated Payment",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"",
													"const today = new Date();",
													"pm.environment.set(\"today's_date\", new Date().toISOString().split('T')[0]);",
													"",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4());",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );",
													"",
													"",
													"// Get the current date",
													"const currentDate = new Date();",
													"// Format the date to YYYY-MM-DD",
													"const formattedDate = currentDate.toISOString().split('T')[0];",
													"// Store the formatted date in an environment variable",
													"pm.environment.set(\"currentDateInRequest\", formattedDate);",
													"// Log the formatted date for debugging",
													"console.log(\"Generated Date: \", formattedDate);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today's_date}}T00:00:00.000Z\",\n                    \"CurrencyRequest\": {\n                        \"InstructionPriority\": \"Normal\",\n                        \"ExtendedPurpose\": \"string\",\n                        \"ChargeBearer\": \"BorneByCreditor\",\n                        \"CurrencyOfTransfer\": \"AUD\",\n                        \"DestinationCountryCode\": \"EE\",\n                        \"ExchangeRateInformation\": {\n                            \"UnitCurrency\": \"WUZ\",\n                            \"ExchangeRate\": 0,\n                            \"RateType\": \"Actual\",\n                            \"ContractIdentification\": \"string\"\n                        }\n                    },\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"{{future_date}}\"\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"PaymentPurposeCode\": \"ACM\"\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Future Dated Payment Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"150.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Future Dated Payment payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Future Dated Payment payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Future Dated Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n  \r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Future Dated Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}"
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Multi Payment - Fixed Periodic Schedule",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n         \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const today = new Date();",
													"const futureDate = new Date(today);",
													"futureDate.setDate(today.getDate() + 30);",
													"pm.environment.set(\"future_date\", futureDate.toISOString().split('T')[0]);",
													"",
													"const tomorrowsDate = new Date(today);",
													"tomorrowsDate.setDate(today.getDate() + 1);",
													"pm.environment.set(\"tomorrows_date\", tomorrowsDate.toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"IsSingleAuthorization\": true,\n                    // \"AuthorizationExpirationDateTime\": \"720:00:00\",\n                    \"ExpirationDateTime\": \"{{future_date}}T00:00:00.000Z\",\n                    \"CurrencyRequest\": {\n                        \"InstructionPriority\": \"Normal\",\n                        \"ExtendedPurpose\": \"string\",\n                        \"ChargeBearer\": \"BorneByCreditor\",\n                        \"CurrencyOfTransfer\": \"AED\",\n                        \"DestinationCountryCode\": \"EE\",\n                        \"ExchangeRateInformation\": {\n                            \"UnitCurrency\": \"WUZ\",\n                            \"ExchangeRate\": 0,\n                            \"RateType\": \"Actual\",\n                            \"ContractIdentification\": \"string\"\n                        }\n                    },\n                    \"ControlParameters\": {\n                        \"IsDelegatedAuthentication\": false,\n                        \"ConsentSchedule\": {\n                            \"MultiPayment\": {\n                                \"MaximumCumulativeNumberOfPayments\": 3,\n                                \"MaximumCumulativeValueOfPayments\": {\n                                    \"Amount\": \"300.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"PeriodicSchedule\": {\n                                    \"Type\": \"FixedPeriodicSchedule\",\n                                    \"PeriodType\": \"Month\",\n                                    \"PeriodStartDate\": \"{{tomorrows_date}}\",\n                                    \"Amount\": {\n                                        \"Amount\": \"1000.00\",\n                                        \"Currency\": \"AED\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                     \"DebtorReference\": \"TPP=123e4567-e89b-12d3-a456-426614174000,Merchant=ABC-ABCD-TL001-2024,BIC=DEUTDEFFXXX\",\n                    \"PaymentPurposeCode\": \"ACM\",\n                    \"SponsoredTPPInformation\": {\n                        \"Name\": \"string\",\n                        \"Identification\": \"string\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"",
													"const authEndpoint = postman.getEnvironmentVariable('auth-endpoint');",
													"",
													"const response_type = postman.getEnvironmentVariable('response_type');",
													"",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{auth-endpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{auth-endpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Fixed Periodic Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"150.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Fixed Periodic Payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Fixed Periodic Payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Fixed Periodic Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n  \r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Fixed Periodic Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "LFI Payment Patch",
					"item": [
						{
							"name": "Payment-log Patch",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentResponse.status\":\"AcceptedCreditSettlementCompleted\"\n\n    //   \"Subscription\": {\n    //         \"Webhook\": {\n    //             \"Url\": \"http://localhost:4700/mock-event-receiver\",\n    //             \"IsActive\": false\n    //         }\n    //     }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cs}}/v2024.46/payment-log/{{paymentId}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"payment-log",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Confirmation Of Payee APIs (application/jwt)",
			"item": [
				{
					"name": "discovery",
					"item": [
						{
							"name": "O3 Util: Prepare private key JWT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"const uuid = require('uuid');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "xxxx: TPP-O3: Client Credential Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token-from-client-credentials-grant-metrics\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "confirmation-of-payee",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorizationCode}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirectUrl}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "code_verifier",
											"value": "{{code-verifier}}",
											"type": "default",
											"disabled": true
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								},
								"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
							},
							"response": []
						},
						{
							"name": "Step 1_A: Sign GET /discovery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"signedPostCopDiscoveryJwt\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-client-credentials-grant-metrics}}",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"iss\": \"{{_clientId}}\",\n        \"exp\": {{exp}},\n        \"nbf\": {{nbf}},\n        \"aud\": \"{{issuer}}\",\n        \"iat\": {{nbf}},\n        \"message\": {\n            \"Data\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"AE320260001234567890123\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 1_B: POST /discovery",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let [jwtHeader, jwtPayload, jwtSignature] = responseBody.split('.')",
											"let jwtPayloadJsonString = atob(jwtPayload)",
											"console.log(jwtPayloadJsonString)",
											"let jwtPayloadJson = JSON.parse(jwtPayloadJsonString)",
											"pm.environment.set(\"discovered-rs\", jwtPayloadJson.message.Data.ResourceServerUrl);",
											"pm.environment.set(\"discovered-as\", jwtPayloadJson.message.Data.AuthorizationServerUrl);",
											"console.log(jwtPayloadJson.message.Data.AuthorizationServerUrl)",
											"console.log(jwtPayloadJson.message.Data.ResourceServerUrl)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-client-credentials-grant-metrics}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/jwt",
										"type": "text"
									},
									{
										"key": "",
										"value": "{{signedPostCopDiscoveryJwt}}",
										"type": "text"
									},
									{
										"key": "x-fapi-auth-date",
										"value": "Sat, 15 Mar 2025 19:43:31 UTC",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-fapi-customer-ip-address",
										"value": "192.168.1.1",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-customer-user-agent",
										"value": "Chrome/114.0.5735.110",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{signedPostCopDiscoveryJwt}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{rs}}/open-finance/confirmation-of-payee/v1.2/discovery",
									"host": [
										"{{rs}}"
									],
									"path": [
										"open-finance",
										"confirmation-of-payee",
										"v1.2",
										"discovery"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "confirmation",
					"item": [
						{
							"name": "O3 Util: Prepare private key JWT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"const uuid = require('uuid');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "xxxx: TPP-O3: Client Credential Grant - AuthServer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token-from-client-credentials-grant-metrics\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "confirmation-of-payee",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorizationCode}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "redirect_uri",
											"value": "{{redirectUrl}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "code_verifier",
											"value": "{{code-verifier}}",
											"type": "default",
											"disabled": true
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{discovered-as}}/token",
									"host": [
										"{{discovered-as}}"
									],
									"path": [
										"token"
									]
								},
								"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
							},
							"response": []
						},
						{
							"name": "Step 1_A Sign GET /confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"signedPostCopDiscoveryJwt\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-client-credentials-grant-metrics}}",
										"disabled": true
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n    \"iss\": \"{{_clientId}}\",\n    \"exp\": {{exp}},\n    \"nbf\": {{nbf}},\n    \"aud\": \"{{issuer}}\",\n    \"iat\": {{nbf}},\n    \"message\": {\n            \"Data\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"AE070331234567890123456\",\n                \"Name\": {\n                \"GivenName\": \"Al Suwaidi\",\n                \"LastName\": \"Ibrahim\" \n                // \"BusinessName\": \"Business Inc.\"\n                }\n            }\n        }\n    },\n  \n    \"signingKeyPEM\": \"{{pem-local}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 1_B: POST /confirmation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/jwt",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-client-credentials-grant-metrics}}",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/jwt",
										"type": "text"
									},
									{
										"key": "x-fapi-auth-date",
										"value": "Sat, 15 Mar 2025 19:43:31 UTC",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-fapi-customer-ip-address",
										"value": "192.168.1.1",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-customer-user-agent",
										"value": "Chrome/114.0.5735.110",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{signedPostCopDiscoveryJwt}}",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{discovered-rs}}/open-finance/confirmation-of-payee/v1.2/confirmation",
									"host": [
										"{{discovered-rs}}"
									],
									"path": [
										"open-finance",
										"confirmation-of-payee",
										"v1.2",
										"confirmation"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Payment Rail",
			"item": [
				{
					"name": "AuthFlow Before Balance",
					"item": [
						{
							"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
											"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
											"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
											"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid accounts",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{issuer}}/.well-known/openid-configuration",
									"host": [
										"{{issuer}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare request object JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const uuid = require('uuid');",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
											"console.log(codeChallenge);",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge );",
											"pm.environment.set(\"code-verifier\", codeVerifier );"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"requestObject\", responseBody);",
											"",
											"var a = responseBody.split('.');",
											"var words = CryptoJS.enc.Base64.parse(a[1]);",
											"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
											"console.log(bodyData);",
											"var jsonData = JSON.parse(bodyData);",
											"console.log(jsonData);",
											"",
											"pm.environment.set(\"response_type\", jsonData.response_type);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											"",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"accounts openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:account-access-consent:v1.2\",\n                \"consent\": {\n                    \"ExpirationDateTime\": \"2025-12-29T23:00:00.000Z\",\n                    \"OnBehalfOf\": {\n                        \"TradingName\": \"Ozone\",\n                        \"LegalName\": \"Ozone-CBUAE\",\n                        \"IdentifierType\": \"Other\",\n                        \"Identifier\": \"Identifier\"\n                    },\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"Permissions\": [\n                        \"ReadTransactionsCredits\",\n                        \"ReadAccountsBasic\",\n                        \"ReadBalances\",\n                        \"ReadTransactionsBasic\",\n                        \"ReadTransactionsDetail\",\n                        \"ReadDirectDebits\",\n                        \"ReadBeneficiariesDetail\",\n                        \"ReadBeneficiariesBasic\",\n                        \"ReadScheduledPaymentsBasic\",\n                        \"ReadScheduledPaymentsDetail\",\n                        \"ReadStandingOrdersBasic\",\n                        \"ReadStandingOrdersDetail\",\n                        \"ReadParty\",\n                        \"ReadPartyUserIdentity\",\n                        \"ReadProduct\"\n                    ],\n                    \"OpenFinanceBilling\": {\n                        \"UserType\": \"Retail\",\n                        \"Purpose\": \"AccountAggregation\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": true\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare private key JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const uuid = require('uuid');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "4000: TPP-API Hub: POST to PAR end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(pm.response.text());",
											"",
											"pm.environment.set(\"par-urn\", jsonData.request_uri);",
											"",
											"const clientId = pm.environment.get(\"_clientId\");",
											"const authEndpoint = pm.environment.get('auth-endpoint');",
											"const response_type = pm.environment.get('response_type');",
											"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
											"",
											"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
											"",
											"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
											"var template = utils.visualizer.qrTemplate1();",
											"var data = utils.visualizer.qrData(myUrl);",
											"",
											"utils.visualizer.draw(pm.visualizer, template, {",
											"    response: data",
											"})",
											"",
											"",
											"// encode the url ",
											"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
											"pm.environment.set(\"authCodeUrl\", responseBody);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{_clientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{requestObject}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{par-endpoint}}",
									"host": [
										"{{par-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5004: LFI-API Hub: /auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
											"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authCodeUrl}}",
									"host": [
										"{{authCodeUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5015: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-cert-dn",
										"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6005: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
										"disabled": true
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"10000109010102\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000009\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    \"consentBody.Data.OpenFinanceBilling\": {\r\n        \"IsLargeCorporate\": true\r\n    },\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"authorizationCode\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "heimdall.suppressRefreshToken",
											"value": "false",
											"type": "text"
										},
										{
											"key": "heimdall.accessTokenValidity",
											"value": "3600",
											"type": "text",
											"disabled": true
										},
										{
											"key": "heimdall.refreshTokenValidity",
											"value": "7200",
											"type": "text",
											"disabled": true
										},
										{
											"key": "openbanking_intent_id",
											"value": "{{consent-id-from-hh}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"{{interaction-id}}",
										"doConfirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "7002: TPP-API Hub: Auth Code Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token-from-auth-code-grant-accounts\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "accounts",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorizationCode}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirectUrl}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code-verifier}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								},
								"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
							},
							"response": []
						},
						{
							"name": "8000: TPP-API Hub: GET multiple accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"account-id\", jsonData.Data.Account[0].AccountId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set uuid and time",
											"pm.environment.set(\"now\", (new Date()).toUTCString());",
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-auth-code-grant-accounts}}"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{obParticipantId}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									}
								],
								"url": {
									"raw": "{{rs}}/open-finance/account-information/v1.2/accounts",
									"host": [
										"{{rs}}"
									],
									"path": [
										"open-finance",
										"account-information",
										"v1.2",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "8002: TPP-API Hub: GET accounts/{accountId}/balances - debtor account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-auth-code-grant-accounts}}"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{obParticipantId}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									}
								],
								"url": {
									"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/100004000000000000000002/balances",
									"host": [
										"{{rs}}"
									],
									"path": [
										"open-finance",
										"account-information",
										"v1.2",
										"accounts",
										"100004000000000000000002",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "8002: TPP-API Hub: GET accounts/{accountId}/balances - creditor account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-auth-code-grant-accounts}}"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{obParticipantId}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									}
								],
								"url": {
									"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/100004000000000000000009/balances",
									"host": [
										"{{rs}}"
									],
									"path": [
										"open-finance",
										"account-information",
										"v1.2",
										"accounts",
										"100004000000000000000009",
										"balances"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Single Instant Payment",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4())",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"1.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            }\n                        }\n                    },\n                    \"PaymentPurposeCode\": \"ACM\" // Where are the ENUMS\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"const uuid = require('uuid');"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"110000109010102\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000002\"\r\n    ],\r\n    \"consentBody.Data.Status\": \"Authorized\",\r\n    \"authorizationChannel\": \"Web\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "accounts",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\":",
															"                pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"1.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "8000: TPP-Hub: POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by consentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Consent PATCH",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Payment Patch",
							"item": [
								{
									"name": "Payment-log Patch",
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"paymentResponse.status\": \"AcceptedCreditSettlementCompleted\"\n    //   \"Subscription\": {\n    //         \"Webhook\": {\n    //             \"Url\": \"http://localhost:4700/mock-event-receiver\",\n    //             \"IsActive\": false\n    //         }\n    //     }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{cs}}/v2024.46/payment-log/{{paymentId}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"payment-log",
												"{{paymentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Single Future Dated Payment",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4());",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );",
													"",
													"",
													"// Get the current date",
													"const currentDate = new Date();",
													"// Format the date to YYYY-MM-DD",
													"const formattedDate = currentDate.toISOString().split('T')[0];",
													"// Store the formatted date in an environment variable",
													"pm.environment.set(\"currentDateInRequest\", formattedDate);",
													"// Log the formatted date for debugging",
													"console.log(\"Generated Date: \", formattedDate);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"2024-12-30T00:00:00.000Z\",\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleFutureDatedPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                },\n                                \"RequestedExecutionDate\": \"2024-12-02\"\n                            }\n                        }\n                    },\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"PaymentPurposeCode\": \"ACM\"\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 6003: Confirm with Heimdall",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant-payments\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "accounts",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII-payment\", responseBody);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Future Dated Payment Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"interactionId\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\": pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"150.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"CurrencyRequest\": {",
															"                \"InstructionPriority\": \"Normal\",",
															"                \"ExtendedPurpose\": \"string\",",
															"                \"ChargeBearer\": \"BorneByCreditor\",",
															"                \"CurrencyOfTransfer\": \"NHK\",",
															"                \"DestinationCountryCode\": \"EE\",",
															"                \"ExchangeRateInformation\": {",
															"                    \"UnitCurrency\": \"WUZ\",",
															"                    \"ExchangeRate\": 0,",
															"                    \"RateType\": \"Actual\",",
															"                    \"ContractIdentification\": \"string\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"PersonalIdentifiableInformation\": pm.environment.get('encryptedPII-payment'),",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step: 9000 POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant-payments}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET Future Dated Payment payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Future Dated Payment payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET Future Dated Payment consents by baseConsentId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents?baseConsentId={{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents"
													],
													"query": [
														{
															"key": "baseConsentId",
															"value": "{{service-initiation-base-consent-id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9001: GET payment consent by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 9002-a: Sign (PATCH) payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{ \r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n  \r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH Future Dated Payment consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}"
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "AuthFlow After Balance",
					"item": [
						{
							"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
											"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
											"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
											"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "openid accounts",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{issuer}}/.well-known/openid-configuration",
									"host": [
										"{{issuer}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare request object JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const uuid = require('uuid');",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
											"console.log(codeChallenge);",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge );",
											"pm.environment.set(\"code-verifier\", codeVerifier );"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"requestObject\", responseBody);",
											"",
											"var a = responseBody.split('.');",
											"var words = CryptoJS.enc.Base64.parse(a[1]);",
											"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
											"console.log(bodyData);",
											"var jsonData = JSON.parse(bodyData);",
											"console.log(jsonData);",
											"",
											"pm.environment.set(\"response_type\", jsonData.response_type);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											"",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"accounts openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:account-access-consent:v1.2\",\n                \"consent\": {\n                    \"ExpirationDateTime\": \"2025-12-29T23:00:00.000Z\",\n                    \"OnBehalfOf\": {\n                        \"TradingName\": \"Ozone\",\n                        \"LegalName\": \"Ozone-CBUAE\",\n                        \"IdentifierType\": \"Other\",\n                        \"Identifier\": \"Identifier\"\n                    },\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"Permissions\": [\n                        \"ReadTransactionsCredits\",\n                        \"ReadAccountsBasic\",\n                        \"ReadBalances\",\n                        \"ReadTransactionsBasic\",\n                        \"ReadTransactionsDetail\",\n                        \"ReadDirectDebits\",\n                        \"ReadBeneficiariesDetail\",\n                        \"ReadBeneficiariesBasic\",\n                        \"ReadScheduledPaymentsBasic\",\n                        \"ReadScheduledPaymentsDetail\",\n                        \"ReadStandingOrdersBasic\",\n                        \"ReadStandingOrdersDetail\",\n                        \"ReadParty\",\n                        \"ReadPartyUserIdentity\",\n                        \"ReadProduct\"\n                    ],\n                    \"OpenFinanceBilling\": {\n                        \"UserType\": \"Retail\",\n                        \"Purpose\": \"AccountAggregation\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": true\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare private key JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const uuid = require('uuid');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "4000: TPP-API Hub: POST to PAR end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(pm.response.text());",
											"",
											"pm.environment.set(\"par-urn\", jsonData.request_uri);",
											"",
											"const clientId = pm.environment.get(\"_clientId\");",
											"const authEndpoint = pm.environment.get('auth-endpoint');",
											"const response_type = pm.environment.get('response_type');",
											"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
											"",
											"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
											"",
											"",
											"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
											"var template = utils.visualizer.qrTemplate1();",
											"var data = utils.visualizer.qrData(myUrl);",
											"",
											"utils.visualizer.draw(pm.visualizer, template, {",
											"    response: data",
											"})",
											"",
											"// encode the url ",
											"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
											"pm.environment.set(\"authCodeUrl\", responseBody);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{_clientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{requestObject}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{par-endpoint}}",
									"host": [
										"{{par-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5004: LFI-API Hub: /auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
											"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{authCodeUrl}}",
									"host": [
										"{{authCodeUrl}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "5015: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "x-cert-dn",
										"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
										"disabled": true
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6005: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
										"disabled": true
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"10000109010101\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000009\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    \"consentBody.Data.OpenFinanceBilling\": {\r\n        \"IsLargeCorporate\": true\r\n    },\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"authorizationCode\", responseBody);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"followRedirects": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "heimdall.suppressRefreshToken",
											"value": "false",
											"type": "text"
										},
										{
											"key": "heimdall.accessTokenValidity",
											"value": "3600",
											"type": "text",
											"disabled": true
										},
										{
											"key": "heimdall.refreshTokenValidity",
											"value": "7200",
											"type": "text",
											"disabled": true
										},
										{
											"key": "openbanking_intent_id",
											"value": "{{consent-id-from-hh}}",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
									"host": [
										"{{authEndpoint}}"
									],
									"path": [
										"{{interaction-id}}",
										"doConfirm"
									]
								}
							},
							"response": []
						},
						{
							"name": "7002: TPP-API Hub: Auth Code Grant",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"token-from-auth-code-grant-accounts\", jsonData.access_token);",
											"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{basicToken}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "accounts",
											"type": "text"
										},
										{
											"key": "code",
											"value": "{{authorizationCode}}",
											"type": "text"
										},
										{
											"key": "redirect_uri",
											"value": "{{redirectUrl}}",
											"type": "text"
										},
										{
											"key": "code_verifier",
											"value": "{{code-verifier}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{tokenEndpoint}}",
									"host": [
										"{{tokenEndpoint}}"
									]
								},
								"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
							},
							"response": []
						},
						{
							"name": "8000: TPP-API Hub: GET multiple accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"pm.environment.set(\"account-id\", jsonData.Data.Account[0].AccountId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set uuid and time",
											"pm.environment.set(\"now\", (new Date()).toUTCString());",
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-auth-code-grant-accounts}}"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{obParticipantId}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									}
								],
								"url": {
									"raw": "{{rs}}/open-finance/account-information/v1.2/accounts",
									"host": [
										"{{rs}}"
									],
									"path": [
										"open-finance",
										"account-information",
										"v1.2",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "8002: TPP-API Hub: GET accounts/{accountId}/balances - debtor account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-auth-code-grant-accounts}}"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{obParticipantId}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									}
								],
								"url": {
									"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/100004000000000000000002/balances",
									"host": [
										"{{rs}}"
									],
									"path": [
										"open-finance",
										"account-information",
										"v1.2",
										"accounts",
										"100004000000000000000002",
										"balances"
									]
								}
							},
							"response": []
						},
						{
							"name": "8002: TPP-API Hub: GET accounts/{accountId}/balances - creditor account",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-auth-code-grant-accounts}}"
									},
									{
										"key": "x-fapi-financial-id",
										"value": "{{obParticipantId}}"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									}
								],
								"url": {
									"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/100004000000000000000009/balances",
									"host": [
										"{{rs}}"
									],
									"path": [
										"open-finance",
										"account-information",
										"v1.2",
										"accounts",
										"100004000000000000000009",
										"balances"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "LFI Payment Patch",
					"item": [
						{
							"name": "Payment-log Patch",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentResponse.status\":\"AcceptedCreditSettlementCompleted\"\n\n    //   \"Subscription\": {\n    //         \"Webhook\": {\n    //             \"Url\": \"http://localhost:4700/mock-event-receiver\",\n    //             \"IsActive\": false\n    //         }\n    //     }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cs}}/v2024.46/payment-log/{{paymentId}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"payment-log",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Data Sharing with Service Initiation",
			"item": [
				{
					"name": "Single Instant Payment",
					"item": [
						{
							"name": "AuthFlow",
							"item": [
								{
									"name": "2006: TPP-API Hub: Get OIDC well-known end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
													"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
													"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
													"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri)"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "openid payments",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{issuer}}/.well-known/openid-configuration",
											"host": [
												"{{issuer}}"
											],
											"path": [
												".well-known",
												"openid-configuration"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare Encrypted PII",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const CryptoJS = require('crypto-js');",
													"const uuid = require('uuid');",
													"",
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
													"",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge);",
													"pm.environment.set(\"code-verifier\", codeVerifier);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"encryptedPII\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{x-fapi-interaction-id}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            // \"DebtorAccount\": {\n            //     \"SchemeName\": \"IBAN\",\n            //     \"Identification\": \"10000109010102\",\n            //     \"Name\": {\n            //         \"en\": \"Luigi International\"\n            //     }\n            // },\n            \"Creditor\": [\n                {\n                    \"CreditorAgent\": {\n                        \"SchemeName\": \"IBAN\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": \"Mario International\"\n                    },\n                    \"Creditor\": {\n                        \"Name\": \"Mario International\"\n                    },\n                    \"CreditorAccount\": {\n                        \"SchemeName\": \"AccountNumber\",\n                        \"Identification\": \"10000109010101\",\n                        \"Name\": {\n                            \"en\": \"Mario International\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-encryption",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-encryption"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare request object JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"pm.environment.set(\"today\", new Date().toISOString().split('T')[0]);",
													"",
													"const uuid = require('uuid');",
													"",
													"const codeVerifier = uuid.v4() + uuid.v4();",
													"",
													"pm.environment.set('service-initiation-consent-id', uuid.v4())",
													"",
													"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
													"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
													"",
													"console.log(codeVerifier);",
													"console.log(hashedCodeVerifier);",
													"console.log(codeChallenge);",
													"codeChallenge = codeChallenge.replaceAll('+', '-');",
													"codeChallenge = codeChallenge.replaceAll('/', '_');",
													"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
													"console.log(codeChallenge);",
													"",
													"pm.environment.set(\"code-challenge\", codeChallenge );",
													"pm.environment.set(\"code-verifier\", codeVerifier );"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"requestObject\", responseBody);",
													"",
													"var a = responseBody.split('.');",
													"var words = CryptoJS.enc.Base64.parse(a[1]);",
													"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
													"console.log(bodyData);",
													"var jsonData = JSON.parse(bodyData);",
													"console.log(jsonData);",
													"",
													"pm.environment.set(\"response_type\", jsonData.response_type);",
													"pm.environment.set(\"scope\", jsonData.scope);",
													"",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"payments accounts openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:service-initiation-consent:v1.2\",\n                \"consent\": {\n                    \"Permissions\": [\n                        \"ReadAccountsBasic\",\n                        \"ReadAccountsDetail\",\n                        \"ReadBalances\",\n                        \"ReadRefundAccount\"\n                    ],\n                    \"CurrencyRequest\": {\n                        \"InstructionPriority\": \"Normal\",\n                        \"ExtendedPurpose\": \"string\",\n                        \"ChargeBearer\": \"BorneByCreditor\",\n                        \"CurrencyOfTransfer\": \"NHK\",\n                        \"DestinationCountryCode\": \"EE\",\n                        \"ExchangeRateInformation\": {\n                            \"UnitCurrency\": \"WUZ\",\n                            \"ExchangeRate\": 0,\n                            \"RateType\": \"Actual\",\n                            \"ContractIdentification\": \"string\"\n                        }\n                    },\n                    \"ConsentId\": \"{{service-initiation-consent-id}}\",\n                    \"IsSingleAuthorization\": true,\n                    \"ExpirationDateTime\": \"{{today}}T23:00:00.000Z\",\n                    \"PersonalIdentifiableInformation\": \"{{encryptedPII}}\",\n                    \"ControlParameters\": {\n                        \"ConsentSchedule\": {\n                            \"SinglePayment\": {\n                                \"Type\": \"SingleInstantPayment\",\n                                \"Amount\": {\n                                    \"Amount\": \"150.00\",\n                                    \"Currency\": \"AED\"\n                                }\n                            }\n                            // \"MultiPayment\": {\n                            //     \"MaximumCumulativeNumberOfPayments\": 4,\n                            //     \"MaximumCumulativeValueOfPayments\": {\n                            //         \"Amount\": \"500.00\",\n                            //         \"Currency\": \"AED\"\n                            //     },\n                            //     \"PeriodicSchedule\": {\n                            //         \"Type\": \"VariableOnDemand\",\n                            //         \"PeriodType\": \"Day\",\n                            //         \"PeriodStartDate\": \"2024-12-07\",\n                            //         \"Controls\": {\n                            //             \"MaximumIndividualAmount\": {\n                            //                 \"Amount\": \"400.00\",\n                            //                 \"Currency\": \"AED\"\n                            //             },\n                            //             \"MaximumCumulativeNumberOfPaymentsPerPeriod\": 3,\n                            //             \"MaximumCumulativeValueOfPaymentsPerPeriod\": {\n                            //                 \"Amount\": \"200.00\",\n                            //                 \"Currency\": \"AED\"\n                            //             }\n                            //         }\n                            //     }\n                            // }\n                        },\n                        \"IsDelegatedAuthentication\": false\n                    },\n                    \"PaymentPurposeCode\": \"ACM\"\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": false\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "O3 Util: Prepare private key JWT for PAR end-point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
													"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
													"",
													"const uuid = require('uuid');",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"private_key_jwt\", responseBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
										},
										"url": {
											"raw": "{{rs}}/o3/v1.0/message-signature",
											"host": [
												"{{rs}}"
											],
											"path": [
												"o3",
												"v1.0",
												"message-signature"
											]
										}
									},
									"response": []
								},
								{
									"name": "4000: TPP-API Hub: POST to PAR end-point",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(pm.response.text());",
													"",
													"pm.environment.set(\"par-urn\", jsonData.request_uri);",
													"",
													"const clientId = pm.environment.get(\"_clientId\");",
													"const authEndpoint = pm.environment.get('auth-endpoint');",
													"const response_type = pm.environment.get('response_type');",
													"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
													"",
													"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
													"",
													"",
													"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
													"var template = utils.visualizer.qrTemplate1();",
													"var data = utils.visualizer.qrData(myUrl);",
													"",
													"utils.visualizer.draw(pm.visualizer, template, {",
													"    response: data",
													"})",
													"",
													"// encode the url ",
													"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
													"pm.environment.set(\"authCodeUrl\", responseBody);",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "client_id",
													"value": "{{_clientId}}",
													"type": "text"
												},
												{
													"key": "request",
													"value": "{{requestObject}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												},
												{
													"key": "x-cert-dn",
													"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{par-endpoint}}",
											"host": [
												"{{par-endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5004: LFI-API Hub: /auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"service-initiation-consent-id\", jsonData.interaction.consentIdsList[0]);\r",
													"pm.environment.set(\"interaction-id\", jsonData.interaction.interactionId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{authCodeUrl}}",
											"host": [
												"{{authCodeUrl}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "5015: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"service-initiation-base-consent-id\", jsonData.data.consentBody.Data.BaseConsentId);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-cert-dn",
												"value": "CN=HQuZPIt3ipkh33Uxytox1E,OU=0015800001041RHAAY,O=OpenBanking,C=GB",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6005: LFI-API Hub: /consents/{consentId}",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
												"disabled": true
											},
											{
												"key": "content-type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}\r\n    // \"CurrencyRequest\": {\r\n    //     \"InstructionPriority\": \"Normal\",\r\n    //     \"ExtendedPurpose\": \"string\",\r\n    //     \"ChargeBearer\": \"BorneByCreditor\",\r\n    //     \"CurrencyOfTransfer\": \"NHK\",\r\n    //     // \"DestinationCountryCode\": \"EE\",\r\n    //     \"ExchangeRateInformation\": {\r\n    //         \"UnitCurrency\": \"WUZ\",\r\n    //         \"ExchangeRate\": 1,\r\n    //         \"RateType\": \"Actual\",\r\n    //         \"ContractIdentification\": \"string\"\r\n    //     }\r\n    // },\r\n    // \"ExchangeRate\": {\r\n    //     \"UnitCurrency\": \"string\",\r\n    //     \"ExchangeRate\": 2,\r\n    //     \"RateType\": \"Actual\",\r\n    //     \"ContractIdentification\": \"string\",\r\n    //     \"ExpirationDateTime\": \"string\"\r\n    // }\r\n"
										},
										"url": {
											"raw": "{{cs}}/v2024.46/consents/{{service-initiation-consent-id}}",
											"host": [
												"{{cs}}"
											],
											"path": [
												"v2024.46",
												"consents",
												"{{service-initiation-consent-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6008: LFI-API Hub: /auth/{interactionId}/doConfirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"authorizationCode\", responseBody);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "heimdall.suppressRefreshToken",
													"value": "false",
													"type": "text"
												},
												{
													"key": "heimdall.accessTokenValidity",
													"value": "3600",
													"type": "text",
													"disabled": true
												},
												{
													"key": "heimdall.refreshTokenValidity",
													"value": "7200",
													"type": "text",
													"disabled": true
												},
												{
													"key": "openbanking_intent_id",
													"value": "{{consent-id-from-hh}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{authEndpoint}}/{{interaction-id}}/doConfirm",
											"host": [
												"{{authEndpoint}}"
											],
											"path": [
												"{{interaction-id}}",
												"doConfirm"
											]
										}
									},
									"response": []
								},
								{
									"name": "7002: TPP-API Hub: Auth Code Grant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonData = JSON.parse(responseBody);",
													"pm.environment.set(\"token-from-auth-code-grant\", jsonData.access_token);",
													"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic {{basicToken}}",
												"disabled": true
											},
											{
												"key": "x-cert-dn",
												"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "authorization_code",
													"type": "text"
												},
												{
													"key": "code",
													"value": "{{authorizationCode}}",
													"type": "text"
												},
												{
													"key": "redirect_uri",
													"value": "{{redirectUrl}}",
													"type": "text"
												},
												{
													"key": "code_verifier",
													"value": "{{code-verifier}}",
													"type": "default"
												},
												{
													"key": "client_assertion_type",
													"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "client_assertion",
													"value": "{{private_key_jwt}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{tokenEndpoint}}",
											"host": [
												"{{tokenEndpoint}}"
											]
										},
										"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "TPP",
							"item": [
								{
									"name": "Data sharing",
									"item": [
										{
											"name": "8000: TPP-API Hub: GET multiple accounts",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"account-id\", jsonData.Data.Account[0].AccountId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "8001: TPP-API Hub: GET accounts/{accountId}",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "8002: TPP-API Hub: GET accounts/{accountId}/balances",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/balances",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "8003: TPP-API Hub: GET accounts/{accountId}/transactions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/transactions",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"transactions"
													],
													"query": [
														{
															"key": "fromBookingDateTime",
															"value": "2024-02-09",
															"disabled": true
														},
														{
															"key": "toBookingDateTime",
															"value": "2024-02-09",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Step 8004: GET accounts/{accountId}/direct-debits",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/direct-debits",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"direct-debits"
													]
												}
											},
											"response": []
										},
										{
											"name": "8005: TPP-API Hub:  GET accounts/{accountId}/beneficiaries",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/beneficiaries",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"beneficiaries"
													]
												}
											},
											"response": []
										},
										{
											"name": "8006: TPP-API Hub: GET accounts/{accountId}/scheduled-payments",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/scheduled-payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"scheduled-payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "8007: TPP-API Hub: GET accounts/{accountId}/standing-orders",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/standing-orders",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"standing-orders"
													]
												}
											},
											"response": []
										},
										{
											"name": "8008: TPP-API Hub: GET accounts/{accountId}/product",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {},
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/product",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"product"
													]
												}
											},
											"response": []
										},
										{
											"name": "8009: TPP-API Hub: GET /parties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/parties",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"parties"
													]
												}
											},
											"response": []
										},
										{
											"name": "8010: TPP-API Hub: GET accounts/{accountId}/parties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/account-information/v1.2/accounts/{{account-id}}/parties",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"account-information",
														"v1.2",
														"accounts",
														"{{account-id}}",
														"parties"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Payments",
									"item": [
										{
											"name": "O3 Util: Prepare Encrypted PII -Post payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const CryptoJS = require('crypto-js');",
															"const uuid = require('uuid');",
															"",
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"",
															"const codeVerifier = uuid.v4() + uuid.v4();",
															"",
															"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
															"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
															"",
															"console.log(codeVerifier);",
															"console.log(hashedCodeVerifier);",
															"console.log(codeChallenge);",
															"",
															"codeChallenge = codeChallenge.replaceAll('+', '-');",
															"codeChallenge = codeChallenge.replaceAll('/', '_');",
															"",
															"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1) }",
															"",
															"console.log(codeChallenge);",
															"",
															"pm.environment.set(\"code-challenge\", codeChallenge);",
															"pm.environment.set(\"code-verifier\", codeVerifier);",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"encryptedPII\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}},\n        \"Initiation\": {\n            \"CreditorAgent\": {\n                \"SchemeName\": \"IBAN\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": \"Mario International\"\n            },\n            \"Creditor\": {\n                \"Name\": \"Mario International\"\n            },\n            \"CreditorAccount\": {\n                \"SchemeName\": \"AccountNumber\",\n                \"Identification\": \"10000109010101\",\n                \"Name\": {\n                    \"en\": \"Mario International\"\n                }\n            }\n        },\n        \"Risk\": {\n            \"DebtorIndicators\": {\n                \"UserName\": {\n                    \"en\": \"xx\"\n                }\n            },\n            \"CreditorIndicators\": {\n                \"AccountType\": \"Retail\",\n                \"IsCreditorConfirmed\": true,\n                \"IsCreditorPrePopulated\": true,\n                \"TradingName\": \"xxx\"\n            }\n        }\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\",\n    \"jwksUrl\": \"{{jwksUrl}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-encryption",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-encryption"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Payment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"const data1 = JSON.stringify({",
															"    \"aud\": [pm.environment.get(\"issuer\")],",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"ConsentId\":",
															"                pm.environment.get(\"service-initiation-consent-id\"),",
															"            \"Instruction\": {",
															"                \"Amount\": {",
															"                    \"Amount\": \"150.00\",",
															"                    \"Currency\": \"AED\"",
															"                }",
															"            },",
															"            \"OpenFinanceBilling\": {",
															"                \"Type\": \"Collection\"",
															"            },",
															"            // \"CurrencyRequest\": {",
															"            //     \"InstructionPriority\": \"Normal\",",
															"            //     \"ExtendedPurpose\": \"string\",",
															"            //     \"ChargeBearer\": \"BorneByCreditor\",",
															"            //     \"CurrencyOfTransfer\": \"NHK\",",
															"            //     \"DestinationCountryCode\": \"EE\",",
															"            //     \"ExchangeRateInformation\": {",
															"            //         \"UnitCurrency\": \"WUZ\",",
															"            //         \"ExchangeRate\": 0,",
															"            //         \"RateType\": \"Actual\",",
															"            //         \"ContractIdentification\": \"string\"",
															"            //     }",
															"            // },",
															"            \"PersonalIdentifiableInformation\":  pm.environment.get('encryptedPII-payment'),",
															"            \"PaymentPurposeCode\": \"ACM\",",
															"            \"DebtorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\",",
															"            \"CreditorReference\": \"TPP=a06154a7-fcb0-0472-be1c-21c8e5a74b6a,BIC=QW292P4TW8T\"",
															"        }",
															"    }",
															"}",
															");",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"pis_request_body_jwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {{data}},\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "8000: TPP-Hub: POST payment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var a = responseBody.split('.');",
															"var words = CryptoJS.enc.Base64.parse(a[1]);",
															"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
															"var jsonData = JSON.parse(bodyData);",
															"pm.environment.set(\"paymentId\", jsonData.message.Data.PaymentId);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// const xIdempotencyKey = $guid;",
															"// console.log(`${xIdempotencyKey}`);",
															"",
															"var uuid = require('uuid');",
															"",
															"pm.environment.set(\"x-idempotency-key\", uuid.v4());",
															"console.log(`${pm.environment.get('x-idempotency-key')}`);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-auth-code-grant}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{pis_request_body_jwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										},
										{
											"name": "1002: O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "1003: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded",
														"type": "text"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "9004: TPP-API Hub: GET payment by id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments/{{paymentId}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments",
														"{{paymentId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET payment by xIdempotencyKey",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"followOriginalHttpMethod": false,
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "x-fapi-financial-id",
														"value": "{{obParticipantId}}"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "10.1.1.10"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-idempotency-key",
														"value": "{{x-idempotency-key}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payments",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Consents",
									"item": [
										{
											"name": "O3 Util: Prepare private key JWT",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
															"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
															"const uuid = require('uuid');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"private_key_jwt\", responseBody);"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "content-type",
														"value": "application/json",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-O3: Client Credential Grant",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonData = JSON.parse(responseBody);",
															"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
															"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													},
													{
														"key": "Authorization",
														"value": "Basic {{basicToken}}",
														"disabled": true
													},
													{
														"key": "x-cert-dn",
														"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "client_credentials",
															"type": "text"
														},
														{
															"key": "scope",
															"value": "openid accounts payments",
															"type": "text"
														},
														{
															"key": "code",
															"value": "{{authorizationCode}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "redirect_uri",
															"value": "{{redirectUrl}}",
															"type": "text",
															"disabled": true
														},
														{
															"key": "code_verifier",
															"value": "{{code-verifier}}",
															"type": "default",
															"disabled": true
														},
														{
															"key": "client_assertion_type",
															"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
															"type": "text"
														},
														{
															"key": "client_assertion",
															"value": "{{private_key_jwt}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{tokenEndpoint}}",
													"host": [
														"{{tokenEndpoint}}"
													]
												},
												"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by baseConsentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-base-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-base-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: TPP-API Hub: GET consents by consentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{x-fapi-interaction-id}}"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": []
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "O3 Util: Prepare request object JWT for Consent PATCH",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
															"const now = Math.floor(Date.now() / 1000);",
															"",
															"const data1 = JSON.stringify({",
															"    \"aud\": pm.environment.get(\"issuer\"),",
															"    \"iss\": pm.environment.get(\"_clientId\"),",
															"    \"jti\": uuid.v4(),",
															"    \"iat\": now,",
															"    \"exp\": now + now,",
															"    \"nbf\": 0,",
															"",
															"    \"message\": {",
															"        \"Data\": {",
															"            \"Status\": \"Revoked\",",
															"            \"RevokedBy\": \"TPP\"",
															"        },",
															"        \"Subscription\": {",
															"            \"Webhook\": {",
															"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
															"                \"IsActive\": false",
															"            }",
															"        }",
															"    }",
															"});",
															"",
															"pm.environment.set(\"data\", data1);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/o3/v1.0/message-signature",
													"host": [
														"{{rs}}"
													],
													"path": [
														"o3",
														"v1.0",
														"message-signature"
													]
												}
											},
											"response": []
										},
										{
											"name": "xxxx: PATCH consents",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// set uuid and time",
															"pm.environment.set(\"now\", (new Date()).toUTCString());",
															"const uuid = require('uuid');",
															"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/jwt"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{signedPatchConsentJwt}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{rs}}/open-finance/payment/v1.2/payment-consents/{{service-initiation-consent-id}}",
													"host": [
														"{{rs}}"
													],
													"path": [
														"open-finance",
														"payment",
														"v1.2",
														"payment-consents",
														"{{service-initiation-consent-id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "LFI Payment Patch",
					"item": [
						{
							"name": "Payment-log Patch",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"paymentResponse.status\":\"AcceptedCreditSettlementCompleted\"\n\n    //   \"Subscription\": {\n    //         \"Webhook\": {\n    //             \"Url\": \"http://localhost:4700/mock-event-receiver\",\n    //             \"IsActive\": false\n    //         }\n    //     }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{cs}}/v2024.46/payment-log/{{paymentId}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"payment-log",
										"{{paymentId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Webhook",
			"item": [
				{
					"name": "Webhook - TPP",
					"item": [
						{
							"name": "O3 Util: Prepare request object JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 60);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"",
											"const uuid = require('uuid');",
											"",
											"const codeVerifier = uuid.v4() + uuid.v4();",
											"",
											"const hashedCodeVerifier = CryptoJS.SHA256(codeVerifier);",
											"let codeChallenge = CryptoJS.enc.Base64.stringify(hashedCodeVerifier);",
											"",
											"console.log(codeVerifier);",
											"console.log(hashedCodeVerifier);",
											"console.log(codeChallenge);",
											"codeChallenge = codeChallenge.replaceAll('+', '-');",
											"codeChallenge = codeChallenge.replaceAll('/', '_');",
											"if (codeChallenge.endsWith('=')) { codeChallenge = codeChallenge.substring(0, codeChallenge.length - 1)}",
											"console.log(codeChallenge);",
											"",
											"pm.environment.set(\"code-challenge\", codeChallenge );",
											"pm.environment.set(\"code-verifier\", codeVerifier );"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"requestObject\", responseBody);",
											"",
											"",
											"var a = responseBody.split('.');",
											"var words = CryptoJS.enc.Base64.parse(a[1]);",
											"var bodyData = CryptoJS.enc.Utf8.stringify(words);",
											"console.log(bodyData);",
											"var jsonData = JSON.parse(bodyData);",
											"console.log(jsonData);",
											"",
											"pm.environment.set(\"response_type\", jsonData.response_type);",
											"pm.environment.set(\"scope\", jsonData.scope);",
											"",
											"pm.environment.set(\"data-sharing-base-consent-id\", jsonData.authorization_details[0].consent.ConsentId);",
											"pm.environment.set(\"data-sharing-consent-id\", jsonData.authorization_details[0].consent.ConsentId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"scope\": \"accounts openid\",\n        \"redirect_uri\": \"{{redirectUrl}}\",\n        \"client_id\": \"{{_clientId}}\",\n        \"nonce\": \"{{$guid}}\",\n        \"state\": \"{{$guid}}\",\n        \"nbf\": {{nbf}},\n        \"response_type\": \"code\",\n        \"code_challenge_method\": \"S256\",\n        \"code_challenge\": \"{{code-challenge}}\",\n        \"max_age\": 3600,\n        \"authorization_details\": [\n            {\n                \"type\": \"urn:openfinanceuae:account-access-consent:v1.2\",\n                \"consent\": {\n                    \"ExpirationDateTime\": \"2025-12-29T23:00:00.000Z\",\n                    \"OnBehalfOf\": {\n                        \"TradingName\": \"Ozone\",\n                        \"LegalName\": \"Ozone-CBUAE\",\n                        \"IdentifierType\": \"Other\",\n                        \"Identifier\": \"Identifier\"\n                    },\n                    \"ConsentId\": \"{{$guid}}\",\n                    \"Permissions\": [\n                        \"ReadTransactionsCredits\",\n                        \"ReadAccountsBasic\",\n                        \"ReadBalances\",\n                        \"ReadTransactionsBasic\",\n                        \"ReadTransactionsDetail\",\n                        \"ReadDirectDebits\",\n                        \"ReadBeneficiariesDetail\",\n                        \"ReadBeneficiariesBasic\",\n                        \"ReadScheduledPaymentsBasic\",\n                        \"ReadScheduledPaymentsDetail\",\n                        \"ReadStandingOrdersBasic\",\n                        \"ReadStandingOrdersDetail\",\n                        \"ReadParty\",\n                        \"ReadPartyUserIdentity\",\n                        \"ReadProduct\"\n                    ],\n                    \"OpenFinanceBilling\": {\n                        \"UserType\": \"Retail\",\n                        \"Purpose\": \"AccountAggregation\"\n                    }\n                },\n                \"subscription\": {\n                    \"Webhook\": {\n                        \"Url\": \"http://localhost:4700/mock-event-receiver\",\n                        \"IsActive\": true\n                    }\n                }\n            }\n        ]\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare private key JWT for PAR end-point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
											"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
											"const uuid = require('uuid');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"private_key_jwt\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "4000: TPP-API Hub: POST to PAR end-point",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let jsonData = JSON.parse(pm.response.text());",
											"",
											"pm.environment.set(\"par-urn\", jsonData.request_uri);",
											"",
											"const clientId = pm.environment.get(\"_clientId\");",
											"const authEndpoint = pm.environment.get('auth-endpoint');",
											"const response_type = pm.environment.get('response_type');",
											"const authCodeUrl = `${authEndpoint}?client_id=${clientId}&response_type=${response_type}&scope=openid&request_uri=${jsonData.request_uri}`;",
											"",
											"pm.environment.set(\"authCodeUrl\", authCodeUrl);",
											"",
											"",
											"var myUrl = utils.splitAndEncodeURL(authCodeUrl)",
											"var template = utils.visualizer.qrTemplate1();",
											"var data = utils.visualizer.qrData(myUrl);",
											"",
											"utils.visualizer.draw(pm.visualizer, template, {",
											"    response: data",
											"})",
											"",
											"// encode the url ",
											"var responseBody = authCodeUrl.replace('adcb://uat.mib.pn/auth', pm.environment.get('authEndpoint'))",
											"pm.environment.set(\"authCodeUrl\", responseBody);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									},
									{
										"key": "x-cert-dn",
										"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "{{_clientId}}",
											"type": "text"
										},
										{
											"key": "request",
											"value": "{{requestObject}}",
											"type": "default"
										},
										{
											"key": "client_assertion_type",
											"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "client_assertion",
											"value": "{{private_key_jwt}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{par-endpoint}}",
									"host": [
										"{{par-endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "6005: LFI-API Hub: /consents/{consentId}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic eyJhbGciOiJQUzI1NiIsInR5cCI6IkpPU0UiLCJjdHkiOiJqc29uIiwia2lkIjoiZVVmdDNhNTV1OEhBOHZ5bkhsNWVPSWpBcTRUWUUtRXpwRHQ2WWx4Sm12OCJ9.eyJpc3MiOiJPcGVuQmFua2luZyIsInN1YiI6IjAwMTU4MDAwMDEwNDFSSEFBWSIsImF1ZCI6ImF1ZCIsImV4cCI6MTYwOTEyMDk3Ni42MDUsImlhdCI6MTYwOTEyMDk2Ni42MDUsIm5iZiI6MTYwOTEyMDk2Ni42MDUsImp0aSI6ImEyOWQxYTMzLTQ5NTktNDExNy05MzQyLWMxZTQzYTc4OWZlMiJ9.QPQwKBBZ8zFflfT9l1NPs0L_VCfkN49p2t_GKlD6fvw1NkbjX3SxLaox-jlgNhn900tAc5cLw15GGfP9NxJssC4etOoDJgJaVMnS0ZqmujUk8V45CIx5ApLDCtHPxL6uzZSbKzTs7aLzeRFXWOoqOfC-VA3s7nohssyj7MyIWqz_KDwZ2jYuq9Ym3dael2fKEuzgoAHugPGhrqXIkgVVO9lCuitNhWbaBwBhkk45Gp2VPYRFHrBHH8gXtKUk7DkQTv2xw3S4swmSD4Bmb4L1RYIHceGB2V39kGVLc3GltIRYFBSbXUwmlMyAv5GjY1E0UVJ7sSZzSh97A2i8SZuenA",
										"disabled": true
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"psuIdentifiers\": {\r\n        \"userId\": \"{{userId}}\"\r\n    },\r\n    \"accountIds\": [\r\n        \"100004000000000000000001\",\r\n        \"100004000000000000000002\",\r\n        \"100004000000000000000003\",\r\n        \"100004000000000000000004\",\r\n        \"100004000000000000000005\"\r\n    ],\r\n    \"authorizationChannel\": \"Web\",\r\n    // \"consentBody.Data.OpenFinanceBilling.IsLargeCorporate\": true,\r\n    \"consentBody.Data.Status\": \"Authorized\"\r\n}"
								},
								"url": {
									"raw": "{{cs}}/v2024.46/consents/{{data-sharing-consent-id}}",
									"host": [
										"{{cs}}"
									],
									"path": [
										"v2024.46",
										"consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "O3 Util: Prepare request object JWT for Consent PATCH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());",
											"const now = Math.floor(Date.now() / 1000);",
											"",
											"const data1 = JSON.stringify({",
											"    \"aud\": pm.environment.get(\"issuer\"),",
											"    \"iss\": pm.environment.get(\"_clientId\"),",
											"    \"jti\": uuid.v4(),",
											"    \"iat\": now,",
											"    \"exp\": now + now,",
											"    \"nbf\": 0,",
											"",
											"    \"message\": {",
											"        \"Data\": {",
											"            \"Status\": \"Revoked\",",
											"            \"RevokedBy\": \"TPP\"",
											"        },",
											"        \"Subscription\": {",
											"            \"Webhook\": {",
											"                \"Url\": \"http://localhost:4700/mock-event-receiver\",",
											"                \"IsActive\": true",
											"            }",
											"        }",
											"    }",
											"});",
											"",
											"pm.environment.set(\"data\", data1);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"signedPatchConsentJwt\", responseBody);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"header\": {\r\n        \"alg\": \"PS256\",\r\n        \"kid\": \"{{kid-local}}\"\r\n    },\r\n    \"body\": {{data}},\r\n    \"signingKeyPEM\": \"{{pem-local}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rs}}/o3/v1.0/message-signature",
									"host": [
										"{{rs}}"
									],
									"path": [
										"o3",
										"v1.0",
										"message-signature"
									]
								}
							},
							"response": []
						},
						{
							"name": "xxxx: TPP-API Hub: PATCH /consents",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// set uuid and time",
											"pm.environment.set(\"now\", (new Date()).toUTCString());",
											"const uuid = require('uuid');",
											"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-fapi-interaction-id",
										"value": "{{x-fapi-interaction-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Data\": {\n        \"Status\": \"Revoked\",\n        \"RevokedBy\": \"TPP\"\n    },\n    \"Subscription\": {\n        \"Webhook\": {\n            \"Url\": \"http://localhost:4700/mock-event-receiver\",\n            \"IsActive\": true\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{rs}}/open-finance/account-information/v1.2/account-access-consents/{{data-sharing-consent-id}}",
									"host": [
										"{{rs}}"
									],
									"path": [
										"open-finance",
										"account-information",
										"v1.2",
										"account-access-consents",
										"{{data-sharing-consent-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 4: View received events",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "o3-aspsp-id",
										"value": "o3-aspsp-id",
										"type": "text"
									},
									{
										"key": "o3-api-uri",
										"value": "o3-api-uri",
										"type": "text"
									},
									{
										"key": "o3-api-operation",
										"value": "o3-api-operation",
										"type": "text"
									},
									{
										"key": "o3-ozone-interaction-id",
										"value": "o3-ozone-interaction-id",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token-from-client-credentials-grant-accounts}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rs}}/review-emitted-events?minutesInPast=10",
									"host": [
										"{{rs}}"
									],
									"path": [
										"review-emitted-events"
									],
									"query": [
										{
											"key": "minutesInPast",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Do Fail",
			"item": [
				{
					"name": "6008: LFI-API Hub: /auth/{interactionId}/doFail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"authorizationCode\", responseBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "heimdall.suppressRefreshToken",
									"value": "false",
									"type": "text"
								},
								{
									"key": "heimdall.accessTokenValidity",
									"value": "3600",
									"type": "text",
									"disabled": true
								},
								{
									"key": "heimdall.refreshTokenValidity",
									"value": "7200",
									"type": "text",
									"disabled": true
								},
								{
									"key": "openbanking_intent_id",
									"value": "{{consent-id-from-hh}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{authEndpoint}}/{{interaction-id}}/doFail",
							"host": [
								"{{authEndpoint}}"
							],
							"path": [
								"{{interaction-id}}",
								"doFail"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Open Product API",
			"item": [
				{
					"name": "1001: TPP-API Hub: Get OIDC well-known end-point",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"auth-endpoint\", jsonData.authorization_endpoint);",
									"pm.environment.set(\"token-endpoint\", jsonData.token_endpoint);",
									"pm.environment.set(\"par-endpoint\", jsonData.pushed_authorization_request_endpoint);",
									"pm.environment.set(\"revocation_endpoint\", jsonData.revocation_endpoint);",
									"pm.environment.set(\"cdr_arrangement_revocation_endpoint\", jsonData.cdr_arrangement_revocation_endpoint);",
									"pm.environment.set(\"jwksUrl\", jsonData.jwks_uri);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Basic {{basicToken}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid products",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{issuer}}/.well-known/openid-configuration",
							"host": [
								"{{issuer}}"
							],
							"path": [
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "1002: O3 Util: Prepare private key JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"exp\", Date.now() / 1000 + 300);",
									"pm.environment.set(\"nbf\", (Date.now() / 1000) - 10);",
									"const uuid = require('uuid');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"private_key_jwt\", responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"header\": {\n        \"alg\": \"PS256\",\n        \"kid\": \"{{kid-local}}\"\n    },\n    \"body\": {\n        \"aud\": \"{{issuer}}\",\n        \"exp\": {{exp}},\n        \"iss\": \"{{_clientId}}\",\n        \"sub\": \"{{_clientId}}\",\n        \"jti\": \"{{$guid}}\",\n        \"iat\": {{nbf}}\n    },\n    \"signingKeyPEM\": \"{{pem-local}}\"\n}"
						},
						"url": {
							"raw": "{{rs}}/o3/v1.0/message-signature",
							"host": [
								"{{rs}}"
							],
							"path": [
								"o3",
								"v1.0",
								"message-signature"
							]
						}
					},
					"response": []
				},
				{
					"name": "1003: TPP-O3: Client Credential Grant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"token-from-client-credentials-grant-private-key-jwt\", jsonData.access_token);",
									"pm.environment.set(\"refresh_token\", jsonData.refresh_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{basicToken}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-cert-dn",
								"value": "CN=e14a49e6-8ad4-4dcf-bd2e-85a38fe8752c,OU=233bcd1d-4216-4b3c-a362-9e4a9282bba7,O=RAIDIAM SERVICES LIMITED,C=UK",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid products",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{authorizationCode}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "redirect_uri",
									"value": "{{redirectUrl}}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "code_verifier",
									"value": "{{code-verifier}}",
									"type": "default",
									"disabled": true
								},
								{
									"key": "client_assertion_type",
									"value": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
									"type": "text"
								},
								{
									"key": "client_assertion",
									"value": "{{private_key_jwt}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{tokenEndpoint}}",
							"host": [
								"{{tokenEndpoint}}"
							]
						},
						"description": "Copy the authorization code generated into the browser into the **Body** tab in the `code` parameter"
					},
					"response": []
				},
				{
					"name": "1004: TPP-API GET Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set uuid and time",
									"pm.environment.set(\"now\", (new Date()).toUTCString());",
									"const uuid = require('uuid');",
									"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							},
							{
								"key": "ProductCategory",
								"value": "SavingsAccount",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{rs}}/open-finance/product/v1.2/products",
							"host": [
								"{{rs}}"
							],
							"path": [
								"open-finance",
								"product",
								"v1.2",
								"products"
							],
							"query": [
								{
									"key": "ProductCategory",
									"value": "CreditCard",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1005: TPP-API Hub: POST LEADS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// set uuid and time",
									"pm.environment.set(\"now\", (new Date()).toUTCString());",
									"const uuid = require('uuid');",
									"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{token-from-client-credentials-grant-private-key-jwt}}"
							},
							{
								"key": "x-fapi-financial-id",
								"value": "{{obParticipantId}}",
								"disabled": true
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Data\": {\n    \"Email\": \"user@example.com\",\n    \"PhoneNumber\": \"+2258947\",\n    \"Name\": {\n      \"GivenName\": \"string\",\n      \"LastName\": \"string\"\n    },\n    \"EmiratesId\": \"string\",\n    \"Nationality\": \"string\",\n    \"ResidentialAddress\": {\n      \"AddressLine\": [\n        \"string\"\n      ],\n      \"Locality\": \"string\",\n      \"Region\": \"string\",\n      \"PostalCode\": {\n        \"PostalCode\": \"strin\"\n      },\n      \"Country\": {\n        \"CountryCode\": \"KF\"\n      }\n    },\n    \"LeadInformation\": \"string\",\n    \"ProductCategories\": [\n      {\n        \"Type\": \"SavingsAccount\"\n      }\n    ]\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{rs}}/open-finance/product/v1.2/leads",
							"host": [
								"{{rs}}"
							],
							"path": [
								"open-finance",
								"product",
								"v1.2",
								"leads"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const uuid = require('uuid');",
					"pm.environment.set(\"x-fapi-interaction-id\", uuid.v4());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"const uuid = require('uuid');",
					"",
					"function isValidJwt(token) {",
					"    return /^[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+$/.test(token);",
					"}",
					"",
					"function parseJwt(token, part) {",
					"    var base64Url = token.split('.')[part];",
					"    var words = CryptoJS.enc.Base64.parse(base64Url);",
					"    var jsonPayload = CryptoJS.enc.Utf8.stringify(words);",
					"    return JSON.parse(jsonPayload);",
					"}",
					"",
					"function processJwtObject(obj) {",
					"    for (var key in obj) {",
					"        if (typeof obj[key] === 'object' && obj[key] !== null) {",
					"            obj[key] = JSON.stringify(obj[key], null, 2); // Format JSON with indentation if it's an object",
					"        }",
					"    }",
					"    return obj;",
					"}",
					"",
					"if (isValidJwt(responseBody)) {",
					"    console.log('Valid JWT')",
					"    var jwtInfo = {};",
					"    jwtInfo.size = responseBody.length;",
					"    jwtInfo.header = processJwtObject(parseJwt(responseBody, 0));",
					"    jwtInfo.payload = processJwtObject(parseJwt(responseBody, 1));",
					"    jwtInfo.signature = responseBody.split('.')[2];",
					"    jwtInfo.expires = ((jwtInfo.payload.exp - Date.now().valueOf() / 1000) / 60).toFixed(1);",
					"    jwtInfo.status = pm.response.code;",
					"",
					"    var template = `",
					"    <style>",
					"      body {",
					"        font-family: Arial, sans-serif;",
					"        padding: 20px;",
					"      }",
					"      table {",
					"        border-collapse: collapse;",
					"        width: 100%;",
					"        margin-bottom: 20px;",
					"      }",
					"      table, th, td {",
					"        border: 1px solid #ddd;",
					"        padding: 8px;",
					"      }",
					"      th {",
					"        background-color: #f2f2f2;",
					"        text-align: left;",
					"      }",
					"      tr:nth-child(even) {",
					"        background-color: #f9f9f9;",
					"      }",
					"      .header {",
					"        font-weight: bold;",
					"        font-size: 1.2em;",
					"        margin-bottom: 10px;",
					"      }",
					"      .signature {",
					"        margin-top: 20px;",
					"        font-style: italic;",
					"      }",
					"      pre {",
					"        white-space: pre-wrap;",
					"        word-wrap: break-word;",
					"      }",
					"    </style>",
					"",
					"    <div class=\"header\">Status: {{response.status}}, JWT Size: {{response.size}} Bytes. Expires in {{response.expires}} minutes</div>",
					"",
					"    <b>Header</b>",
					"    <table>",
					"        <tr><th>Property</th><th>Value</th></tr>",
					"        {{#each response.header}}",
					"            <tr><td>{{@key}}</td><td><pre>{{this}}</pre></td></tr>",
					"        {{/each}}",
					"    </table>",
					"",
					"    <b>Payload</b>",
					"    <table>",
					"        <tr><th>Property</th><th>Value</th></tr>",
					"        {{#each response.payload}}",
					"            <tr><td>{{@key}}</td><td><pre>{{this}}</pre></td></tr>",
					"        {{/each}}",
					"    </table>",
					"",
					"    <div class=\"signature\">Signature: {{response.signature}}</div>",
					"    `;",
					"",
					"    pm.visualizer.set(template, { response: jwtInfo });",
					"} else {",
					"    console.log(\"Response is not a valid JWT token.\");",
					"",
					"}",
					"",
					"",
					"qrTemplates = {",
					"    qrTemplate1: `",
					"    <style>",
					"      body {",
					"        font-family: Arial, sans-serif;",
					"        padding: 20px;",
					"      }",
					"      table {",
					"        border-collapse: collapse;",
					"        width: 100%;",
					"        margin-bottom: 20px;",
					"      }",
					"      table, th, td {",
					"        border: 1px solid #ddd;",
					"        padding: 8px;",
					"      }",
					"      th {",
					"        background-color: #f2f2f2;",
					"        text-align: left;",
					"      }",
					"      tr:nth-child(even) {",
					"        background-color: #f9f9f9;",
					"      }",
					"      .header {",
					"        font-weight: bold;",
					"        font-size: 1.2em;",
					"        margin-bottom: 10px;",
					"      }",
					"      .signature {",
					"        margin-top: 20px;",
					"        font-style: italic;",
					"      }",
					"      pre {",
					"        white-space: pre-wrap;",
					"        word-wrap: break-word;",
					"      }",
					"    ",
					"    .input{width:100%}",
					"    </style>",
					"",
					"    <div class=\"header\">QR Code for bank Auth URL</div>",
					"    <table>",
					"      <tr><td width=\"25%\"><img src=\"{{response.qrimage}}\" /></td><td><input value=\"{{response.url}}\" class=\"input\"/></td></tr>",
					"    </table>",
					"    ",
					"    ",
					"    ",
					"    `",
					"}",
					"",
					"utils = {",
					"    splitAndEncodeURL: function (url) {",
					"        // Split the URL into the base and query string parts",
					"        const [baseUrl, queryString] = url.split('?');",
					"",
					"        // If there's no query string, return the original URL",
					"        if (!queryString) return baseUrl;",
					"",
					"        let params = queryString.split('&');",
					"        let encodedParams = params.map(param => {",
					"            let [key, value] = param.split('=');",
					"            // Encode both key and value",
					"            let encodedKey = encodeURIComponent(key);",
					"            let encodedValue = encodeURIComponent(value);",
					"            return `${encodedKey}=${encodedValue}`;",
					"        });",
					"",
					"",
					"        // Reconstruct the URL with encoded query parameters",
					"        return `${baseUrl}?${encodedParams.join('&')}`;",
					"    },",
					"    visualizer: {",
					"        qrTemplate1: function () {",
					"            return qrTemplates.qrTemplate1;",
					"        },",
					"        qrTemplate: function (response) {",
					"            return `<img src=\"{{response}}\" />`;",
					"        },",
					"        qrData: function (myUrl) {",
					"            return { qrimage: `http://api.qrserver.com/v1/create-qr-code/?data=${myUrl}&size=300x300`, url: myUrl };",
					"        },",
					"        draw: function (visualizer, template, data) {",
					"            return visualizer.set(template, data);",
					"        }",
					"    }",
					"};",
					"",
					"",
					"",
					"var tenant = 'ALLICA';",
					"",
					"const usersByBank = {",
					"    ALLICA: [{",
					"        psuIdentifiers: {",
					"            userId: \"100001000000000000000002\"",
					"",
					"        },",
					"",
					"        accountIds: [",
					"            \"100004000000000000000002\"",
					"            // \"100004000000000000000003\",",
					"            // \"100004000000000000000004\",",
					"            // \"100004000000000000000005\",",
					"        ]",
					"    }],",
					"",
					"}",
					"const userDetails = usersByBank[tenant][0];",
					"",
					"pm.environment.set('userId', userDetails.psuIdentifiers.userId);",
					"// pm.environment.set('accountIds', JSON.stringify(userDetails.accountIds));",
					"// pm.environment.set('accountIdsPayment', JSON.stringify(userDetails.accountIds[0]));",
					"",
					"",
					""
				]
			}
		}
	]
}